{"version":3,"sources":["hyperfiddle/electric/impl/ir_utils.cljc"],"mappings":"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","names":["hyperfiddle.electric.impl.ir-utils/reduce*","ir","f","init","ac","todos","cljs.core/List","cljs.core/reduced?","cljs.core/empty?","cljs.core/unreduced","vec__45803","seq__45804","cljs.core/seq","first__45805","cljs.core/first","cljs.core/next","G__45806","cljs.core/Keyword","cljs.core.concat","cljs.core.conj","cljs.core.ex_info","hyperfiddle.electric.impl.ir-utils/->reducible","hyperfiddle.electric.impl.ir-utils/t_hyperfiddle$electric$impl$ir_utils45808","_","hyperfiddle.electric.impl.ir-utils/unwrite","i","ret","G__45812","G__45814","G__45815","G__45816","cljs.core.mapv","cljs.core.list_STAR_","G__45817","cljs.core.map","G__45818","G__45819","G__45824","G__45825","G__45831","temp__5818__auto__","form","hyperfiddle.electric.impl.ir-utils/postwalk","G__45835","G__45836","cljs.core.update","p1__45832#","cljs.core.partial","cljs.core/mapv","p1__45833#","p1__45834#"],"sourcesContent":["(ns hyperfiddle.electric.impl.ir-utils\r\n  (:require [hyperfiddle.electric.impl.ir :as ir])\r\n  #?(:clj (:import [clojure.lang IReduce])))\r\n\r\n(defn reduce* [ir f init]\r\n  (loop [ac init, todos (list ir)]\r\n    (if (or (reduced? ac) (empty? todos))\r\n      (unreduced ac)\r\n      (let [[ir & todos] (seq todos)]\r\n        (case (::ir/op ir)\r\n          (::ir/sub ::ir/global ::ir/source ::ir/def ::ir/eval ::ir/node ::ir/nop)\r\n          (recur (f ac ir) todos)\r\n\r\n          (::ir/target ::ir/input)\r\n          (recur (f ac ir) (concat (::ir/deps ir) todos))\r\n\r\n          (::ir/pub)\r\n          (recur (f ac ir) (conj todos (::ir/inst ir) (::ir/init ir)))\r\n\r\n          (::ir/constant ::ir/variable ::ir/output ::ir/lift)\r\n          (recur (f ac ir) (conj todos (::ir/init ir)))\r\n\r\n          (::ir/apply)\r\n          (recur (f ac ir) (concat (list (::ir/fn ir)) (::ir/args ir) todos))\r\n\r\n          (::ir/bind)\r\n          (recur (f ac ir) (conj todos (::ir/inst ir)))\r\n\r\n          (::ir/do)\r\n          (recur (f ac ir) (concat (::ir/deps ir) (list (::ir/inst ir)) todos))\r\n\r\n          #_else (throw (ex-info \"what IR op is this?\" {:inst ir})))))))\r\n\r\n(defn ->reducible [ir]\r\n  (reify IReduce\r\n    (#?(:clj reduce :cljs -reduce) [_ f init] (reduce* ir f init))\r\n    (#?(:clj reduce :cljs -reduce) [_ f] (reduce* ir f (f)))))\r\n\r\n(defn unwrite [i]\r\n  (let [ret (case (::ir/op i)\r\n              ::ir/sub      (list 'ir/sub (::ir/index i))\r\n              ::ir/pub      (list 'ir/pub\r\n                              (unwrite (::ir/init i)) (unwrite (::ir/inst i)))\r\n              ::ir/constant (list 'ir/constant (unwrite (::ir/init i)))\r\n              ::ir/target   (list 'ir/target (mapv unwrite (::ir/deps i)))\r\n              ::ir/apply    (list* 'ir/apply (unwrite (::ir/fn i)) (map unwrite (::ir/args i)))\r\n              ::ir/global   (list 'ir/global (::ir/name i))\r\n              ::ir/variable (list 'ir/variable (unwrite (::ir/init i)))\r\n              ::ir/source   (list 'ir/source)\r\n              ::ir/input    (list 'ir/input (mapv unwrite (::ir/deps i)))\r\n              ::ir/output   (list 'ir/output (unwrite (::ir/init i)))\r\n              ::ir/def      (list 'ir/inject (::ir/slot i))\r\n              ::ir/eval     (list 'ir/eval (::ir/form i))\r\n              ::ir/node     (list 'ir/node (::ir/slot i))\r\n              ::ir/bind     (list 'ir/bind (::ir/slot i) (::ir/index i) (unwrite (::ir/inst i)))\r\n              ::ir/lift     (list 'ir/lift (unwrite (::ir/init i)))\r\n              ::ir/do       (list 'ir/do (mapv unwrite (::ir/deps i)) (unwrite (::ir/inst i)))\r\n              ::ir/nop      (list 'ir/nop)\r\n              #_else (throw (ex-info \"what IR op is this?\" {:inst i})))]\r\n    (if-some [form (:hyperfiddle.electric.impl.lang/form i)]\r\n      (list* (first ret) :form form (next ret))\r\n      ret)))\r\n\r\n(defn postwalk [ir f]\r\n  (f (case (::ir/op ir)\r\n       (::ir/sub ::ir/source ::ir/def ::ir/eval ::ir/node ::ir/nop) ir\r\n       (::ir/pub) (-> ir (update ::ir/inst postwalk f) (update ::ir/init postwalk f))\r\n       (::ir/constant ::ir/variable ::ir/output ::ir/lift) (update ir ::ir/init postwalk f)\r\n       (::ir/target ::ir/input) (update ir ::ir/deps (partial mapv #(postwalk % f)))\r\n       (::ir/apply) (-> ir (update ::ir/args (partial mapv #(postwalk % f))) (update ::ir/fn postwalk f))\r\n       (::ir/bind) (update ir ::ir/inst postwalk f)\r\n       (::ir/do) (-> ir (update ::ir/deps (partial mapv #(postwalk % f))) (update ::ir/inst postwalk f))\r\n       #_else (throw (ex-info (str \"what IR op is \" ir) {:inst ir})))))\r\n"],"x_google_ignoreList":[0]}