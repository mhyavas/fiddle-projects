{"version":3,"sources":["missionary/impl/Propagator.cljs"],"mappings":";AAIA,AAAA;AAAA;AAAA;AAAA,AAEA,AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,AAAA,CAAA,AAAA,sDAAA,WAAAA,jEAASU;;AAAT,AAAA,IAAAT,SAAA;AAAA,AAAA,IAAAC,WAAA,CAAA,AAAA,mBAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAD,qCAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAE,MAAA,CAAA,8DAAA,CAAA,AAAA,mBAAA;;;;;AAAA,CAAA,AAAA,uDAAA,WAAAF,OAAAG,zEAASM;;AAAT,AAAA,IAAAT,aAAA;AAAA,AAAA,OAAA,AAAAA,sBAAAA,WAAA,AAAA,CAAAA,mBAAA,AAAAI,iBAAAD;;;AAAA,CAAA,AAAA,+EAAA,/EAASM,0FAGQoB,EAAEC;;AAHnB,AAAA,YAAA,RAGYF;AAHZ,AAII,QAACG,+DAAAA,0EAAAA,bAAIH,sDAAAA,hDAAKC,sDAAAA,pDAAEC,sDAAAA;;;AAJhB,CAAA,AAAA,wFAAA,xFAASrB,mGAOImB,MAAKI;;AAPlB,AAAA,gBAAA,ZAOaJ;AAPb,AAQI,GAAI,CAAYA,cAAKI;AAArB;;AACI,oBAAI,iBAAAC,WAAI,AAASL;IAAbM,WAAmB,AAASF;AAA5B,AAAA,kIAAAC,SAAAC,oDAAAD,SAAAC,hMAACC,8DAAAA,iFAAAA;;AAAL;;AAAA;;;;;AATR,CAAA,gDAAA,hDAAS1B;AAAT,AAAA,AAAA;;;AAAA,CAAA,sDAAA,tDAASA;;AAAT,CAAA,yDAAA,zDAASA;;AAAT,CAAA,8DAAA,WAAAJ,mBAAAC,qBAAAC,jHAASE;AAAT,AAAA,OAAAD,iBAAAF,qBAAA;;;AAAA;;;4CAAA,5CAASI,gGAAWC,MAAMC,MAAMC,MAAMC,QAAQC,UAAUC,IAAIC,IAAIC,KAAKC,OAAOC,OAC/CC,KAAaC,SAASC,OAAOC,QAAQC,MAAMC,QAAQC;AADhF,AAAA,YAAAlB,qCAAoBE,MAAMC,MAAMC,MAAMC,QAAQC,UAAUC,IAAIC,IAAIC,KAAKC,OAAOC,OAC/CC,KAAaC,SAASC,OAAOC,QAAQC,MAAMC,QAAQC;;;AADvElB,AAYT,AAAA;;;;;;;;;;;AAAA;AAAA,CAAA,8CAAA,9CAAS2B;AAAT,AAAA,AAAA;;;AAAA,CAAA,oDAAA,pDAASA;;AAAT,CAAA,uDAAA,vDAASA;;AAAT,CAAA,4DAAA,WAAA/B,mBAAAC,qBAAAC,/GAAS6B;AAAT,AAAA,OAAA5B,iBAAAF,qBAAA;;;AAAA;;;0CAAA,1CAAS+B,4FAASC,OAAOC,MAAMC,QAAQC,QAAQC;AAA/C,AAAA,YAAAN,mCAAkBE,OAAOC,MAAMC,QAAQC,QAAQC;;;AAAtCN,AAET,AAAA;;;;;;;;;;;;;;;;;;;AAAA,AAAA,CAAA,AAAA,yDAAA,WAAArC,pEAAS8C;;AAAT,AAAA,IAAA7C,SAAA;AAAA,AAAA,IAAA2C,WAAA,CAAA,AAAA,mBAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAA3C;;;;AAAA,MAAA,KAAAE,MAAA,CAAA,8DAAA,CAAA,AAAA,mBAAA;;;;;AAAA,CAAA,AAAA,0DAAA,WAAAF,OAAA4C,5EAASC;;AAAT,AAAA,IAAA7C,aAAA;AAAA,AAAA,OAAA,AAAAA,sBAAAA,WAAA,AAAA,CAAAA,mBAAA,AAAAI,iBAAAwC;;;AAAA,CAAA,AAAA,kFAAA,lFAASC;;AAAT,AAAA,YAAA,RAEYjB;AAFZ,AAGI,QAACwB,iEAAAA,wEAAAA,TAAMxB,oDAAAA;;;AAHX,CAAA,AAAA,oFAAA,pFAASiB,+FAKEjB;;AALX,AAAA,gBAAA,ZAKWA;AALX,AAMI,QAACyB,kEAAAA,6EAAAA,bAAOzB,yDAAAA;;;AANZ,CAAA,mDAAA,nDAASiB;AAAT,AAAA,AAAA;;;AAAA,CAAA,yDAAA,zDAASA;;AAAT,CAAA,4DAAA,5DAASA;;AAAT,CAAA,iEAAA,WAAAxC,mBAAAC,qBAAAC,pHAASsC;AAAT,AAAA,OAAArC,iBAAAF,qBAAA;;;AAAA;;;+CAAA,/CAASwC,sGAAcC,OAAOC,OAAOhC,IAAIC,IAAIgC,KAAKC,KAAKvB,KAAKY,MAAeY;AAA3E,AAAA,YAAAN,wCAAuBE,OAAOC,OAAOhC,IAAIC,IAAIgC,KAAKC,KAAKvB,KAAKY,MAAeY;;;AAAlEN,AAQT,AAAA;;;;;;;;;;;;;AAAA;AAAA,CAAA,8CAAA,9CAASS;AAAT,AAAA,AAAA;;;AAAA,CAAA,oDAAA,pDAASA;;AAAT,CAAA,uDAAA,vDAASA;;AAAT,CAAA,4DAAA,WAAAjD,mBAAAC,qBAAAC,/GAAS+C;AAAT,AAAA,OAAA9C,iBAAAF,qBAAA;;;AAAA;;;0CAAA,1CAASiD,4FAAiBC,KAAcC,KAAKjB,QAAQkB,IAAIC,QAAQC,QAAQC;AAAzE,AAAA,YAAAP,mCAA0BE,KAAcC,KAAKjB,QAAQkB,IAAIC,QAAQC,QAAQC;;;AAAhEP,AAET,AAAKQ,qCAAQ,wCAAA,IAAA,MAAA,KAAA,KAAA,KAAA,KAAA,tEAACP;AAEd,sCAAA,tCAAKQ;AAEL,gCAAA,hCAAe5B,wEAAI6B,EAAEC;AAArB,AACE,IAAMC,KAAG,AAASF;IACZG,KAAG,AAASF;IACZG,KAAG,iBAAAC,kBAAKH;IAALI,kBAAQH;AAAR,AAAA,SAAAE,kBAAAC,mBAAAD,kBAAAC;;AAFT,AAGE,QAAA,JAAOC;;AAAP,AACE,GAAI,CAAGA,IAAEH;AACP,IAAMI,KAAG,CAAMR,EAAEO;IACXE,KAAG,CAAMR,EAAEM;AADjB,AAEE,GAAI,CAAIC,OAAGC;AACT,eAAO,KAAA,JAAKF;;;;AACZ,QAAGC,KAAGC;;;AACV,QAAGP,KAAGC;;;;;AAEd,kCAAA,lCAAMO,4EAAiBV,EAAaC;AAApC,AACE,GAAI,AAAC9B,8BAAG,AAAS6B,QAAG,AAASC;AAC3B,AAAI,CAAM,AAAWA,YAAG,AAASD;;AAC7B,CAAM,AAASA,UAAGC;;AAAGD;;AACzB,AAAI,CAAM,AAAWA,YAAG,AAASC;;AAC7B,CAAM,AAASA,UAAGD;;AAAGC;;;AAE7B,qCAAA,rCAAMU,kFAAoBC;AAA1B,AACE,IAAMC,OAAK,AAASD;AAApB,AACE,aAAA,ZAAM,AAASA;;AACf,WAAA,PAAOE;WAAP,PACO7B;IACA4B,WAAKA;;AAFZ,AAGE,GAAI,aAAA,ZAAMA;AACR,GAAI,SAAA,RAAM5B;AAAM6B;;AAAK,GAAI,SAAA,RAAMA;AAAM7B;;AAAK,OAACyB,gCAAKI,KAAK7B;;;;AACrD,IAAMC,OAAK,AAAW2B;AAAtB,AACE,oBAAA,nBAAM,AAAWA;;AACjB,GAAI,SAAA,RAAM5B;AACR,eAAO6B;eAAKD;eAAK3B;;;;;;AACjB,IAAM2B,WAAK,AAACH,gCAAKzB,KAAK4B;AAAtB,AACE,eAAO,EAAI,SAAA,RAAMC,eAAMD,SAAK,AAACH,gCAAKI,KAAKD;eAAvC;eAAkD3B;;;;;;;;;;AAEhE,qCAAA,rCAAM6B,kFAAoBjD,EAAakD;AAAvC,AACE,GAAI,MAAA,LAAMlD;AAAGkD;;AAAE,OAACN,gCAAKM,EAAElD;;;AAEzB,mCAAA,nCAAMmD,8EAAOL;AAAb,AACE,IAAMvD,OAAK,AAAQuD;AAAnB,AACE,YAAA,XAAM,AAAQA;;AACdvD;;AAEJ,oCAAA,pCAAM6D,gFAAiBC;AAAvB,AACE,qBAAA,pBAAM,AAAW,AAAUA;;AAC3B,IAAAC,eAAC,AAAWD;AAAZ,AAAA,QAAAC,6CAAAA,+CAAAA;;AAEF,uCAAA,vCAAMC,sFAAoBC,IAAaH,GAAiBzB;AAAxD,AACE,IAAMkB,MAAI,AAAUO;AAApB,AACE,WAAA,VAAM,AAAOG;;AACb,IAAO5B,UAAIA;;AAAX,AACE,GAAU,YAAA,XAAMA;AAAhB;;AAAA,AACE,IAAM6B,KAAG,kBAAI,AAAQ7B,cAAK,AAAOA,YAAK,AAAOA;IACvC8B,IAAE,AAAQ9B;AADhB,AAEE,gBAAA,fAAM,AAAQA;;AACd,CAAM,AAAW4B,cAAK,AAAU5B;;AAChC,GAAI,eAAA,dAAM,AAAUkB;AAAM,IAAAa,iBAAI,AAAS/B;AAAb,AAAA,qEAAA+B,+BAAAA,nGAACF,mCAAAA,mDAAAA;;AAAkB,CAACA,mCAAAA,qCAAAA;;;AAC9C,eAAOC;;;;;;;AAEjB,kCAAA,lCAAME,4EAAiBd,IAAaU;AAApC,AACE,YAAA,XAAM,AAAQV;;AACd,IAAMO,KAAG,AAAWP;AAApB,AACE,CAAM,AAAWU,cAAK,AAACX,mCAAQC;;AAC/B,CAAM,AAAWU,cAAKV;;AACtB,CAAM,AAAWU,cAAKH;;AACtB,IAAAQ,qBAAC,AAAQf;AAAT,AAAA,CAAAe,mDAAAA,qDAAAA;;AACA,IAAMjC,MAAI,AAAQkB;AAAlB,AACE,YAAA,XAAM,AAAQA;;AACd,YAAA,XAAM,AAAQA;;AACd,OAACS,qCAAUC,IAAIH,GAAGzB;;AAExB,kCAAA,lCAAMkC,4EAAeN,IAAajE,KAAcwE,EAAWb,EAAgBc;AAA3E,AACE,IAAMX,KAAG,AAAWG;IACdV,MAAI,AAAUO;IACdzB,MAAI,QAAA,KAAA,XAAUrC,WACR,iBAAMqC,MAAI,AAAQkB;AAAlB,AACE,YAAA,XAAM,AAAQA;;AAAUlB;;AAJtC,AAKE,CAAM,AAAQkB,WAAKvD;;AACnB,AAACgE,qCAAUC,IAAIH,GAAGzB;;AAClB,GAAUmC;AAAV;AAAA,AACE,WAAA,VAAM,AAAOP;;AACb;AAAA,AACE,IAAAS,2BAAc,AAAWT;AAAzB,AAAA,GAAA,CAAAS,4BAAA;AAEE,AAAI,CAAM,AAAQT,WAAK,YAAA,XAAK,AAAQA;;AAChC,IAAAU,2BAAgB,AAAWV;AAA3B,AAAA,GAAA,CAAAU,4BAAA;AAAA;AAAA,oBAAAA,hBAAYpB;AAAZ,AACE,eAAA,dAAM,AAAWU;;AACjB,AAACI,gCAAKd,cAAIU;;AAAK;;;AALvB,oBAAAS,hBAAUnB;AAAV,AACE,AAAI,AAACc,gCAAKd,cAAIU;;AAAK;;;;;AAKvB,eAAA,dAAM,AAAWA;;;AACnB,CAAM,AAAQA,WAAKO;;AACnB,CAAM,AAAWP,cAAKN;;AACtB,QAAM,AAAOM,UAAKQ;;AAEtB,oCAAA,pCAAMG,gFAAsBT,EAAgBM;AAA5C,AACE,GAAI,MAAA,LAAMN;AACR,AAAI,CAAM,AAAQM,SAAGA;;AACjB,QAAM,AAAQA,SAAGA;;AACrB,IAAMd,IAAE,AAAQQ;AAAhB,AACE,CAAM,AAAQM,SAAGN;;AACjB,CAAM,AAAQM,SAAGd;;AACjB,CAAM,AAAQA,SAAGc;;AACjB,QAAM,AAAQN,SAAGM;;;AAEvB,sCAAA,tCAAMI,oFAAwBJ;AAA9B,AACE,IAAMX,KAAG,AAAUW;IACbd,IAAE,AAAQc;IACVN,IAAE,AAAQM;AAFhB,AAGE,UAAA,TAAM,AAAQA;;AACd,UAAA,TAAM,AAAQA;;AACd,GAAI,CAAYd,MAAEc;AAChB,cAAA,bAAM,AAAWX;;AACjB,AAAI,CAAM,AAAQK,SAAGR;;AACjB,CAAM,AAAQA,SAAGQ;;AACjB,CAAM,AAAWL,aAAIK;;;AAC3B,IAAMZ,MAAI,AAAUO;AAApB,AACE,CAAM,AAAQW,SAAG,AAAQlB;;AACzB,QAAM,AAAQA,WAAKkB;;AAEzB,oCAAA,pCAAMK,gFAAsBL;AAA5B,AACE,IAAMX,KAAG,AAAUW;IACbd,IAAE,AAAQc;IACVN,IAAE,AAAQM;AAFhB,AAGE,UAAA,TAAM,AAAQA;;AACd,UAAA,TAAM,AAAQA;;AACd,GAAI,CAAYd,MAAEc;AAChB,qBAAA,bAAM,AAAWX;;AACjB,AAAI,CAAM,AAAQK,SAAGR;;AACjB,CAAM,AAAQA,SAAGQ;;AACjB,QAAM,AAAWL,aAAIK;;;AAE/B,qCAAA,rCAAMY,kFAAkBd,IAAkBe,KAAKC;AAA/C,AACE,GAAU,SAAA,RAAMD;AAAhB;;AAAA,AACE,IAAMP,IAAE,AAAOR;AAAf,AACE,IAAO5B,YAAI,AAAQ2C;;AAAnB,AACE,IAAMb,UAAE,AAAQ9B;AAAhB,AACE,CAAM,AAAO4B,UAAK5B;;AAAK,CAAC4C,kCAAAA,oCAAAA;;AACxB,GAAU,CAAY5C,cAAI2C;AAA1B;AAAA,AACE,eAAOb;;;;;;;AACb,QAAM,AAAOF,UAAKQ;;;AAExB,oCAAA,pCAAMzC,gFAAsBK;AAA5B,AACE,IAAM4B,MAAIxB;IACJqB,KAAG,AAAUzB;IACbkB,MAAI,AAAUO;IACd9D,OAAK,AAAC4D,iCAAML;IACZiB,IAAE,AAAQP;IACVN,IAAE,AAAWM;IACbQ,IAAE,AAAOR;AANf,AAOE,IAAA,AAAK,YAAA,XAAM,AAAQA;;AACd,CAAM,AAAWA,cAAKH;;AACtB,CAAM,AAAOG,UAAK5B;;AAClB,YAAA,XAAM,AAAQA;;AACd,GAAI,aAAA,ZAAM,AAAQA;AAChB,AAAI,CAAM,AAAQA,WAAK,AAAQkB;;AAC3B,CAAM,AAAQA,WAAKlB;;AACnB,MAAO,KAAA6C,qBAAA;;AACX,AAAI,AAACJ,kCAAOzC;;AACR,AAACuC,kCAAO,AAAWd,WAAI,CAAM,AAAWA,aAAIzB;;AAC5C,IAAA8C,eAAC,AAAU5B;AAAX,AAAA,QAAA4B,6CAAAA,+CAAAA;;UAVX,AAWc,AAACZ,gCAAKN,IAAIjE,KAAKwE,EAAEb,EAAEc;;AAErC,mCAAA,nCAAM1C,8EAAqBM;AAA3B,AACE,IAAM4B,MAAIxB;IACJqB,KAAG,AAAUzB;IACbkB,MAAI,AAAUO;IACd9D,OAAK,AAAC4D,iCAAML;IACZiB,IAAE,AAAQP;IACVN,IAAE,AAAWM;IACbQ,IAAE,AAAOR;AANf,AAOE,IAAA,AAAK,YAAA,XAAM,AAAQA;;AACd,CAAM,AAAWA,cAAKH;;AACtB,CAAM,AAAOG,UAAK5B;;AAClB,GAAU,aAAA,ZAAM,AAAQA;AAAxB;AAAA,AACE,GAAU,eAAA,dAAM,AAAUkB;AAA1B;AAAA,AACE,GAAM,CAAYO,OAAG,AAAWP;AAAhC,AACE,GAAI,eAAA,dAAM,AAAUA;AAClB,GAAI,CAAYlB,QAAI,AAAQA;AAC1B,AAACwB,kCAAOC;;AACR,AAAI,CAAM,AAASzB,YAAK,KAAA6C,qBAAA;;AACpB,AAACL,oCAASxC;;;AAChB,oBAAI,AAAQA;AACV,GAAI,EAAK,CAAYA,QAAI,AAAQA,eAAM,eAAA,dAAM,AAAWyB;AACtD,AAACD,kCAAOC;;AACR,AAAI,AAACgB,kCAAOzC;;AACR,IAAA+C,qBAAC,AAAU7B;AAAX,AAAA,CAAA6B,mDAAAA,qDAAAA;;;AACN,GAAI,EAAK,CAAY/C,QAAI,AAAQA,eAAM,eAAA,dAAM,AAAWyB;AACtD,AAACD,kCAAOC;;AACR,AAAI,YAAA,XAAM,AAAQzB;;AACd,AAACwC,oCAASxC;;;;;AAdtB;;;;AALT;UAAA,AAoBkB,AAACkC,gCAAKN,IAAIjE,KAAKwE,EAAEb,EAAEc;;AAEzC,kCAAA,lCAAMY,4EAAevB,GAAGmB;AAAxB,AACE;;;AAAA,AAEG,IAAMhB,MAAIxB;IACJzC,OAAK,AAAC4D,iCAAM,AAAUE;IACtBU,IAAE,AAAQP;IACVN,IAAE,AAAWM;IACbQ,IAAE,AAAOR;AAJf,AAKE,IAAA,AACE,YAAA,XAAM,AAAQA;;AACd,CAAM,AAAWA,cAAKH;;AACtB,WAAA,VAAM,AAAOG;;AACb,QAACgB,kCAAAA,oCAAAA;UAJH,AAIe,AAACV,gCAAKN,IAAIjE,KAAKwE,EAAEb,EAAEc;;6BACnC9B;AAZJ,AAaG,IAAMsB,MAAIxB;IACJzC,OAAK,AAAC4D,iCAAM,AAAUE;IACtBU,IAAE,AAAQP;IACVN,IAAE,AAAWM;IACbQ,IAAE,AAAOR;AAJf,AAKE,IAAA,AACE,YAAA,XAAM,AAAQA;;AACd,CAAM,AAAWA,cAAKH;;AACtB,WAAA,VAAM,AAAOG;;AACb,QAACgB,kCAAAA,qCAAAA,LAAEtC,iBAAAA;UAJL,AAIiB,AAAC4B,gCAAKN,IAAIjE,KAAKwE,EAAEb,EAAEc;;oBAVrC9B;;;;;6BAAAA;;;;;;;;;AAYN,iCAAA,jCAAMjC,0EAAgB6C,IAAI5D,IAAIC;AAA9B,AACE,IAAMqE,MAAIxB;IACJzC,OAAK,AAAC4D,iCAAML;IACZiB,IAAE,AAAQP;IACVN,IAAE,AAAWM;IACbQ,IAAE,AAAOR;AAJf,AAKE,IAAA,AAAK,YAAA,XAAM,AAAQA;;AACd,IAAMH,KAAG,iBAAAY,qBAAa,AAAWnB;AAAxB,AAAA,GAAA,CAAAmB,sBAAA;AAEE,IAAMZ,KAAG,sDAAA,KAAA,KAAA,hEAAC9C,wCAAUuC,IAAI,AAASA;AAAjC,AACE,CAAM,AAAWA,cAAKO;;AACtB,CAAM,AAAWG,cAAKH;;AACtB,WAAA,VAAM,AAAOG;;AACb,IAAAqB,qBAAC,AAAW/B;AAAZ,AAAA,CAAA+B,mDAAAA,qDAAAA;;AACA,CAAM,AAAWxB,aACf,iBAAAyB,WACC,AAACF,gCAAKvB,GAAG,AAAOP;IADjBiC,WAEC,AAACH,gCAAKvB,GAAG,AAAOP;IAFjBkC,eAAC,AAAUlC;AAAX,AAAA,QAAAkC,6CAAAA,2CAAAF,SAAAC,YAAAC,uBAAAF,SAAAC;;;AAGF1B;;AAXJ,SAAAY,LAAUZ;AAAV,AACE,QAAM,AAAWG,cAAKH;;;IAW3BzB,MAAI,0DAAA,KAAA,KAAA,eAAA,nFAACZ,6CAAekC,EAAEG,GAAGnE,IAAIC,mBAAgB,AAAS2D;AAZ5D,AAaE,AAACqB,kCAAO,AAAWd,WAAI,CAAM,AAAWA,aAAIzB;;AAC5C,CAAM,AAAO4B,UAAK5B;;AAClB,IAAAqD,qBAAC,AAAanC;AAAd,AAAA,CAAAmC,mDAAAA,qDAAAA;;AACArD;UAjBP,AAiBqB,AAACkC,gCAAKN,IAAIjE,KAAKwE,EAAEb,EAAEc;;AAE5C,mCAAA,nCAAMkB;AAAN,AACE,IAAAjB,qBAAsB,AAAWjC;AAAjC,AAAA,GAAA,CAAAiC,sBAAA;AAOE,IAAAuB,WAAM,CAAA;AAAN,AAAA,CAAAA,SAAA,OAA6B,iBAAAC,WAAMxD;AAAN,uCAAoB,CAAAwD,WAAA,nDAAM,CAAMxD;;AAAhCwD;;;AAA7BD;;AAPF,SAAAvB,LAAmBZ;AAAnB,AACE,IAAMH,IAAE,AAAUG;IACZrD,IAAE,AAASkD;IACXQ,IAAE,AAAS1D;IACXmF,IAAE,KAAAC,MAAY,KAAA,JAAK1B;AAHzB,AAIE,IAAA2B,wBAAY3B;AAAZ,AAAA,cAAA,VAAUjB;;AAAV,AAAA,GAAA,WAAA4C,VAAU5C;AAAV,AAAe,CAAM0C,EAAE1C,WAAE,CAAMzC,EAAEyC;;AAAjC,eAAA,WAAA,VAAUA;;;;AAAV;;;;AACA,IAAA6C,WAAMH;AAAN,AAAA,CAAAG,SAAc5B,KAAE,iBAAA6B,WAAM,AAAYrC;AAAlB,cAA0B,CAAAqC,WAAA,1BAAM,CAAM,AAAYrC;;AAAlDqC;;;AAAhBD;;;AAKN,kCAAA,lCAAMI;AAAN,AACE,OAAQ1D;;AAEV,sCAAA,tCAAM4D;AAAN,AAAA,OAAAD,gBACG,AAAW,AAAW3D;;AAEzB,kCAAA,lCAAM6D;AAAN,AACE,OAAS,AAAW7D;;AAEtB,kCAAA,lCAAM8D,4EAAM5D;AAAZ,AACE,QAAM,AAAS,AAAWF,mDAAUE;;AAEtC,kCAAA,lCAAM6D;AAAN,AACE,OAAS,AAAO/D;;AAElB,kCAAA,lCAAMgE,4EAAM9D;AAAZ,AACE,QAAM,AAAS,AAAOF,+CAAUE;;AAElC,qCAAA,rCAAM+D,kFAAS/D;AAAf,AACE,IAAMN,MAAI,AAAOI;AAAjB,AACE,YAAA,XAAM,AAAQJ;;AACd,CAAM,AAASA,YAAKM;;AACpB,OAACkC,oCAASxC;;AAEd,qCAAA,rCAAMsE,kFAAShE;AAAf,AACE,IAAMN,MAAI,AAAOI;AAAjB,AACE,CAAM,AAASJ,YAAKM;;AACpB,OAACkC,oCAASxC;;AAEd,kCAAA,lCAAMuE;AAAN,AACE,IAAMvE,MAAI,AAAOI;AAAjB,AACE,YAAA,XAAM,AAAQJ;;AACd,AAACwC,oCAASxC;;AACV,IAAMyB,KAAG,AAAUzB;AAAnB,AACE,OAACuC,kCAAO,AAAWd,WACjB,CAAM,AAAWA,aAAIzB;;AAE7B,kCAAA,lCAAMwE;AAAN,AACE,IAAMxE,MAAI,AAAOI;AAAjB,AACE,OAACoC,oCAASxC;;AAEd,qCAAA,rCAAMyE,kFAAS7B;AAAf,AACE,IAAMhB,MAAIxB;AAAV,AACE,OAACsC,mCAAQd,IAAI,AAAW,AAAWA,oBAAMgB;;AAE7C,qCAAA,rCAAM8B,kFAAS9B;AAAf,AACE,IAAMhB,MAAIxB;AAAV,AACE,OAACsC,mCAAQd,IAAI,AAAW,AAAWA,oBAAMgB;;AAE7C,sCAAA,tCAAM+B;AAAN,AACE,IAAM/C,MAAIxB;IACJqB,KAAG,AAAWG;IACdV,MAAI,AAAUO;AAFpB,AAGE,GAAI,EAAK,CAAYA,OAAG,AAAWP,kBAAM,GAAA,eAAA,dAAO,AAAWO;AACzD,IAAMxB,UAAQ,AAAW2B;AAAzB,AACE,GAAI,EAAI,YAAA,XAAM3B,sBAAS,AAACxB,8BAAG,AAASwB,cAAS,AAASiB;AACpD,QAAM,AAAWU,cAAK,AAACP,mCAAQ,AAAWO,YAAKV;;AAC/C,QAAM,AAAWU,cAAK,AAACP,mCAAQ,AAAWO,YAAKV;;;AACnD,IAAA0D,eAAC,AAAQ1D;AAAT,AAAA,QAAA0D,6CAAAA,+CAAAA;;;AAEN,qCAAA,rCAAMC;AAAN,AACE,IAAMpD,KAAG,AAAWrB;IACdc,MAAI,AAAUO;AADpB,AAEE,GAAM,CAAYA,OAAG,AAAWP;AAAhC,AACE,qBAAA,bAAM,AAAUA;;AADlB;;;AAGJ,kCAAA,lCAAM4D,4EAAM5H,MAAMC,MAAMC,QAAQC,UAAU0H,QAAQC,QAAQxH,KAAKyH;AAA/D,AACE,uIAAA,KAAA,KAAA,MAAA,SAAA,KAAA,KAAA,KAAA,xKAACjI,0CAAY,AAACsG,mCAAOpG,MAAMC,MAAMC,QAAQC,UAAU0H,QAAQC,QAAQxH,yBAAqByH;;AAE1F,kCAAA,lCAAMC,4EAAMhI,MAAMC,MAAMC,QAAQC,UAAU8H,KAAKC,KAAK5H,KAAKC,OAAOC,OAAO2H;AAAvE,AACE,+IAAA,MAAA,SAAA,KAAA,KAAA,KAAA,tKAACrI,0CAAY,AAACsG,mCAAOpG,MAAMC,MAAMC,QAAQC,UAAU8H,KAAKC,KAAK5H,KAAKC,OAAOC,iBAAe2H","names":["unused__18786__auto__","self__","G__45480","js/Error","args45479","cljs.core/aclone","this__5283__auto__","writer__5284__auto__","opt__5285__auto__","cljs.core/-write","missionary.impl.Propagator/Publisher","missionary.impl.Propagator/->Publisher","ranks","initp","inits","perform","subscribe","lcb","rcb","tick","accept","reject","held","children","effect","current","child","sibling","prop","this","l","r","missionary.impl.Propagator/sub","that","G__45488","G__45489","missionary.impl.Propagator/lt","missionary.impl.Propagator/Process","missionary.impl.Propagator/->Process","parent","state","process","waiting","pending","G__45503","args45498","missionary.impl.Propagator/Subscription","missionary.impl.Propagator/->Subscription","source","target","prev","next","flag","missionary.impl.Propagator/unsub","missionary.impl.Propagator/accept","missionary.impl.Propagator/Context","missionary.impl.Propagator/->Context","time","busy","sub","emitter","reacted","delayed","missionary.impl.Propagator/context","missionary.impl.Propagator/children","x","y","xl","yl","ml","x__5086__auto__","y__5087__auto__","i","xi","yi","missionary.impl.Propagator/link","missionary.impl.Propagator/dequeue","pub","head","heap","missionary.impl.Propagator/enqueue","p","missionary.impl.Propagator/enter","missionary.impl.Propagator/cancel","ps","fexpr__45537","missionary.impl.Propagator/propagate","ctx","cb","n","G__45539","missionary.impl.Propagator/tick","fexpr__45540","missionary.impl.Propagator/exit","b","s","temp__5818__auto__","temp__5820__auto__","missionary.impl.Propagator/attach","missionary.impl.Propagator/dispatch","missionary.impl.Propagator/detach","missionary.impl.Propagator/foreach","subs","f","js/missionary.Cancelled","fexpr__45545","fexpr__45548","missionary.impl.Propagator/bind","fexpr__45558","G__45560","G__45561","fexpr__45559","fexpr__45562","missionary.impl.Propagator/ranks","a","js/Array","n__5589__auto__","G__45571","G__45572","G__45564","G__45567","missionary.impl.Propagator/time","cljs.core/deref","missionary.impl.Propagator/transfer","missionary.impl.Propagator/getp","missionary.impl.Propagator/setp","missionary.impl.Propagator/gets","missionary.impl.Propagator/sets","missionary.impl.Propagator/success","missionary.impl.Propagator/failure","missionary.impl.Propagator/step","missionary.impl.Propagator/done","missionary.impl.Propagator/waiting","missionary.impl.Propagator/pending","missionary.impl.Propagator/schedule","fexpr__45588","missionary.impl.Propagator/resolve","missionary.impl.Propagator/task","success","failure","task","missionary.impl.Propagator/flow","step","done","flow"],"sourcesContent":["(ns missionary.impl.Propagator\n  (:refer-clojure :exclude [time resolve])\n  (:import missionary.Cancelled))\n\n(declare lt sub unsub accept)\n\n(deftype Publisher [ranks initp inits perform subscribe lcb rcb tick accept reject\n                    ^boolean held ^number children effect current child sibling prop]\n  IFn\n  (-invoke [this l r]\n    (sub this l r))\n\n  IComparable\n  (-compare [this that]\n    (if (identical? this that)\n      0 (if (lt (.-ranks this) (.-ranks that))\n          -1 +1))))\n\n(deftype Process [parent state process waiting pending])\n\n(deftype Subscription [source target lcb rcb prev next prop state ^boolean flag]\n  IFn\n  (-invoke [this]\n    (unsub this))\n  IDeref\n  (-deref [this]\n    (accept this)))\n\n(deftype Context [^number time ^boolean busy process sub emitter reacted delayed])\n\n(def context (->Context 0 false nil nil nil nil nil))\n\n(def children 0)\n\n(defn ^boolean lt [x y]\n  (let [xl (alength x)\n        yl (alength y)\n        ml (min xl yl)]\n    (loop [i 0]\n      (if (< i ml)\n        (let [xi (aget x i)\n              yi (aget y i)]\n          (if (== xi yi)\n            (recur (inc i))\n            (< xi yi)))\n        (> xl yl)))))\n\n(defn link [^Publisher x ^Publisher y]\n  (if (lt (.-ranks x) (.-ranks y))\n    (do (set! (.-sibling y) (.-child x))\n        (set! (.-child x) y) x)\n    (do (set! (.-sibling x) (.-child y))\n        (set! (.-child y) x) y)))\n\n(defn dequeue [^Publisher pub]\n  (let [head (.-child pub)]\n    (set! (.-child pub) nil)\n    (loop [heap nil\n           prev nil\n           head head]\n      (if (nil? head)\n        (if (nil? prev) heap (if (nil? heap) prev (link heap prev)))\n        (let [next (.-sibling head)]\n          (set! (.-sibling head) nil)\n          (if (nil? prev)\n            (recur heap head next)\n            (let [head (link prev head)]\n              (recur (if (nil? heap) head (link heap head)) nil next))))))))\n\n(defn enqueue [^Publisher r ^Publisher p]\n  (if (nil? r) p (link p r)))\n\n(defn enter [pub]\n  (let [held (.-held pub)]\n    (set! (.-held pub) true)\n    held))\n\n(defn cancel [^Process ps]\n  (set! (.-current (.-parent ps)) nil)\n  ((.-process ps)))\n\n(defn propagate [^Context ctx ^Process ps ^Subscription sub]\n  (let [pub (.-parent ps)]\n    (set! (.-sub ctx) nil)\n    (loop [sub sub]\n      (when-not (nil? sub)\n        (let [cb (if (.-flag sub) (.-lcb sub) (.-rcb sub))\n              n (.-prop sub)]\n          (set! (.-prop sub) nil)\n          (set! (.-process ctx) (.-source sub))\n          (if (nil? (.-accept pub)) (cb (.-state sub)) (cb))\n          (recur n))))))\n\n(defn tick [^Publisher pub ^Context ctx]\n  (set! (.-held pub) true)\n  (let [ps (.-current pub)]\n    (set! (.-reacted ctx) (dequeue pub))\n    (set! (.-emitter ctx) pub)\n    (set! (.-process ctx) ps)\n    ((.-tick pub))\n    (let [sub (.-prop pub)]\n      (set! (.-prop pub) nil)\n      (set! (.-held pub) false)\n      (propagate ctx ps sub))))\n\n(defn exit [^Context ctx ^boolean held ^boolean b ^Process p ^Subscription s]\n  (let [ps (.-process ctx)\n        pub (.-parent ps)\n        sub (when-not held\n              (let [sub (.-prop pub)]\n                (set! (.-prop pub) nil) sub))]\n    (set! (.-held pub) held)\n    (propagate ctx ps sub)\n    (when-not b\n      (set! (.-sub ctx) nil)\n      (loop []\n        (if-some [pub (.-reacted ctx)]\n          (do (tick pub ctx) (recur))\n          (do (set! (.-time ctx) (inc (.-time ctx)))\n              (when-some [pub (.-delayed ctx)]\n                (set! (.-delayed ctx) nil)\n                (tick pub ctx) (recur)))))\n      (set! (.-emitter ctx) nil))\n    (set! (.-busy ctx) b)\n    (set! (.-process ctx) p)\n    (set! (.-sub ctx) s)))\n\n(defn attach [^Subscription n ^Subscription s]\n  (if (nil? n)\n    (do (set! (.-prev s) s)\n        (set! (.-next s) s))\n    (let [p (.-prev n)]\n      (set! (.-next s) n)\n      (set! (.-prev s) p)\n      (set! (.-next p) s)\n      (set! (.-prev n) s))))\n\n(defn dispatch [^Subscription s]\n  (let [ps (.-target s)\n        p (.-prev s)\n        n (.-next s)]\n    (set! (.-prev s) nil)\n    (set! (.-next s) nil)\n    (if (identical? p s)\n      (set! (.-waiting ps) nil)\n      (do (set! (.-prev n) p)\n          (set! (.-next p) n)\n          (set! (.-waiting ps) n)))\n    (let [pub (.-parent ps)]\n      (set! (.-prop s) (.-prop pub))\n      (set! (.-prop pub) s))))\n\n(defn detach [^Subscription s]\n  (let [ps (.-target s)\n        p (.-prev s)\n        n (.-next s)]\n    (set! (.-prev s) nil)\n    (set! (.-next s) nil)\n    (if (identical? p s)\n      (set! (.-pending ps) nil)\n      (do (set! (.-prev n) p)\n          (set! (.-next p) n)\n          (set! (.-pending ps) n)))))\n\n(defn foreach [^Context ctx ^Subscription subs f]\n  (when-not (nil? subs)\n    (let [s (.-sub ctx)]\n      (loop [sub (.-next subs)]\n        (let [n (.-next sub)]\n          (set! (.-sub ctx) sub) (f)\n          (when-not (identical? sub subs)\n            (recur n))))\n      (set! (.-sub ctx) s))))\n\n(defn accept [^Subscription sub]\n  (let [ctx context\n        ps (.-target sub)\n        pub (.-parent ps)\n        held (enter pub)\n        b (.-busy ctx)\n        p (.-process ctx)\n        s (.-sub ctx)]\n    (try (set! (.-busy ctx) true)\n         (set! (.-process ctx) ps)\n         (set! (.-sub ctx) sub)\n         (set! (.-flag sub) false)\n         (if (nil? (.-next sub))\n           (do (set! (.-prop sub) (.-prop pub))\n               (set! (.-prop pub) sub)\n               (throw (Cancelled. \"Flow publisher cancelled.\")))\n           (do (detach sub)\n               (attach (.-waiting ps) (set! (.-waiting ps) sub))\n               ((.-accept pub))))\n         (finally (exit ctx held b p s)))))\n\n(defn unsub [^Subscription sub]\n  (let [ctx context\n        ps (.-target sub)\n        pub (.-parent ps)\n        held (enter pub)\n        b (.-busy ctx)\n        p (.-process ctx)\n        s (.-sub ctx)]\n    (try (set! (.-busy ctx) true)\n         (set! (.-process ctx) ps)\n         (set! (.-sub ctx) sub)\n         (when-not (nil? (.-next sub))\n           (when-not (nil? (.-effect pub))\n             (when (identical? ps (.-current pub))\n               (if (nil? (.-accept pub))\n                 (if (identical? sub (.-next sub))\n                   (cancel ps)\n                   (do (set! (.-state sub) (Cancelled. \"Task publisher cancelled.\"))\n                       (dispatch sub)))\n                 (if (.-flag sub)\n                   (if (and (identical? sub (.-next sub)) (nil? (.-waiting ps)))\n                     (cancel ps)\n                     (do (detach sub)\n                         ((.-reject pub))))\n                   (if (and (identical? sub (.-next sub)) (nil? (.-pending ps)))\n                     (cancel ps)\n                     (do (set! (.-flag sub) true)\n                         (dispatch sub))))))))\n         nil (finally (exit ctx held b p s)))))\n\n(defn bind [^Process ps f]\n  (fn\n    ([]\n     (let [ctx context\n           held (enter (.-parent ps))\n           b (.-busy ctx)\n           p (.-process ctx)\n           s (.-sub ctx)]\n       (try\n         (set! (.-busy ctx) true)\n         (set! (.-process ctx) ps)\n         (set! (.-sub ctx) nil)\n         (f) (finally (exit ctx held b p s)))))\n    ([x]\n     (let [ctx context\n           held (enter (.-parent ps))\n           b (.-busy ctx)\n           p (.-process ctx)\n           s (.-sub ctx)]\n       (try\n         (set! (.-busy ctx) true)\n         (set! (.-process ctx) ps)\n         (set! (.-sub ctx) nil)\n         (f x) (finally (exit ctx held b p s)))))))\n\n(defn sub [^Publisher pub lcb rcb]\n  (let [ctx context\n        held (enter pub)\n        b (.-busy ctx)\n        p (.-process ctx)\n        s (.-sub ctx)]\n    (try (set! (.-busy ctx) true)\n         (let [ps (if-some [ps (.-current pub)]\n                    (set! (.-process ctx) ps)\n                    (let [ps (->Process pub (.-initp pub) nil nil nil)]\n                      (set! (.-current pub) ps)\n                      (set! (.-process ctx) ps)\n                      (set! (.-sub ctx) nil)\n                      ((.-perform pub))\n                      (set! (.-process ps)\n                        ((.-effect pub)\n                         (bind ps (.-lcb pub))\n                         (bind ps (.-rcb pub))))\n                      ps))\n               sub (->Subscription p ps lcb rcb nil nil nil (.-inits pub) false)]\n           (attach (.-waiting ps) (set! (.-waiting ps) sub))\n           (set! (.-sub ctx) sub)\n           ((.-subscribe pub))\n           sub) (finally (exit ctx held b p s)))))\n\n(defn ranks []\n  (if-some [^Process ps (.-process context)]\n    (let [p (.-parent ps)\n          r (.-ranks p)\n          n (alength r)\n          a (make-array (inc n))]\n      (dotimes [i n] (aset a i (aget r i)))\n      (doto a (aset n (doto (.-children p) (->> (inc) (set! (.-children p)))))))\n    (doto (make-array 1) (aset 0 (doto children (->> (inc) (set! children)))))))\n\n;; public API\n\n(defn time []\n  (.-time context))\n\n(defn transfer []\n  @(.-process (.-process context)))\n\n(defn getp []\n  (.-state (.-process context)))\n\n(defn setp [x]\n  (set! (.-state (.-process context)) x))\n\n(defn gets []\n  (.-state (.-sub context)))\n\n(defn sets [x]\n  (set! (.-state (.-sub context)) x))\n\n(defn success [x]\n  (let [sub (.-sub context)]\n    (set! (.-flag sub) true)\n    (set! (.-state sub) x)\n    (dispatch sub)))\n\n(defn failure [x]\n  (let [sub (.-sub context)]\n    (set! (.-state sub) x)\n    (dispatch sub)))\n\n(defn step []\n  (let [sub (.-sub context)]\n    (set! (.-flag sub) true)\n    (dispatch sub)\n    (let [ps (.-target sub)]\n      (attach (.-pending ps)\n        (set! (.-pending ps) sub)))))\n\n(defn done []\n  (let [sub (.-sub context)]\n    (dispatch sub)))\n\n(defn waiting [f]\n  (let [ctx context]\n    (foreach ctx (.-waiting (.-process ctx)) f)))\n\n(defn pending [f]\n  (let [ctx context]\n    (foreach ctx (.-pending (.-process ctx)) f)))\n\n(defn schedule []\n  (let [ctx context\n        ps (.-process ctx)\n        pub (.-parent ps)]\n    (if (and (identical? ps (.-current pub)) (some? (.-process ps)))\n      (let [emitter (.-emitter ctx)]\n        (if (or (nil? emitter) (lt (.-ranks emitter) (.-ranks pub)))\n          (set! (.-reacted ctx) (enqueue (.-reacted ctx) pub))\n          (set! (.-delayed ctx) (enqueue (.-delayed ctx) pub))))\n      ((.-tick pub)))))\n\n(defn resolve []\n  (let [ps (.-process context)\n        pub (.-parent ps)]\n    (when (identical? ps (.-current pub))\n      (set! (.-effect pub) nil))))\n\n(defn task [initp inits perform subscribe success failure tick task]\n  (->Publisher (ranks) initp inits perform subscribe success failure tick nil nil false 0 task nil nil nil nil))\n\n(defn flow [initp inits perform subscribe step done tick accept reject flow]\n  (->Publisher (ranks) initp inits perform subscribe step done tick accept reject false 0 flow nil nil nil nil))"],"x_google_ignoreList":[0]}