{"version":3,"sources":["hyperfiddle/electric/impl/runtime.cljc"],"mappings":"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","names":["hyperfiddle.electric.impl.runtime/fail","exception","_in-scope-stacktrace","hyperfiddle.electric.impl.runtime/failure","p1__47725#","cljs.core.some_fn","js/hyperfiddle.electric.Failure","hyperfiddle.electric.impl.runtime/pending","js/hyperfiddle.electric.Pending","hyperfiddle.electric.impl.runtime/error","msg","js/Error","hyperfiddle.electric.impl.runtime/pst","e","js/console.error","hyperfiddle.electric.impl.runtime/select-debug-info","debug-info","cljs.core.merge","cljs.core/select-keys","contrib.data/select-ns","hyperfiddle.electric.impl.runtime/check-failure","<x","missionary.core.latest","x","hyperfiddle.electric.debug.error","hyperfiddle.electric.impl.runtime/handle-apply-error","args","error","cljs.core._EQ_","vec__47731","cljs.core.nth","thrown","context","cljs.core.assoc","var_args","args__5728__auto__","len__5722__auto__","i__5723__auto__","argseq__5729__auto__","cljs.core/IndexedSeq","hyperfiddle.electric.impl.runtime/latest-apply","seq47734","G__47735","cljs.core/first","cljs.core/next","self__5707__auto__","contrib.assert/-check","cljs.core.partial","cljs.core/every?","cljs.core/some?","cljs.core.apply","missionary.core/latest","f","temp__5814__auto__","err","e47741","hyperfiddle.electric.impl.runtime/causal","y","fexpr__47744","hyperfiddle.electric.impl.runtime/latest-first","hyperfiddle.electric.impl.runtime/pure","missionary.core/cp*","cr47751-state","cr47751-place-0","cr47751-exception","e47759","cloroutine.impl/coroutine","G__47760","cljs.core.object_array","cr47751-block-0","hyperfiddle.electric.impl.runtime/empty-event","unused__18786__auto__","self__","G__47792","args47761","cljs.core/aclone","this__5283__auto__","writer__5284__auto__","opt__5285__auto__","cljs.core/-write","hyperfiddle.electric.impl.runtime/It","hyperfiddle.electric.impl.runtime/->It","state","cancel","transfer","_","hyperfiddle.electric.impl.runtime/lift-cancelled","cljs.core/comp","it","hyperfiddle.electric.impl.runtime/t_hyperfiddle$electric$impl$runtime47795","cljs.core/deref","e47804","js/missionary.Cancelled","hyperfiddle.electric.impl.runtime/signal","missionary.core/signal!","hyperfiddle.electric.impl.runtime/this","cljs.core/volatile!","hyperfiddle.electric.impl.runtime/context-slot-root","hyperfiddle.electric.impl.runtime/context-slot-local-id","hyperfiddle.electric.impl.runtime/context-slot-remote-id","hyperfiddle.electric.impl.runtime/context-slot-pending-rpos","hyperfiddle.electric.impl.runtime/context-slot-pending-wpos","hyperfiddle.electric.impl.runtime/context-slot-pending-buffer","hyperfiddle.electric.impl.runtime/context-slot-frame-store","hyperfiddle.electric.impl.runtime/context-slot-event","hyperfiddle.electric.impl.runtime/context-slot-check","hyperfiddle.electric.impl.runtime/context-slot-notifier","hyperfiddle.electric.impl.runtime/context-slot-terminator","hyperfiddle.electric.impl.runtime/context-slot-incoming","hyperfiddle.electric.impl.runtime/context-slots","hyperfiddle.electric.impl.runtime/tier-slot-parent","hyperfiddle.electric.impl.runtime/tier-slot-position","hyperfiddle.electric.impl.runtime/tier-slot-buffer","hyperfiddle.electric.impl.runtime/tier-slot-size","hyperfiddle.electric.impl.runtime/tier-slot-foreigns","hyperfiddle.electric.impl.runtime/tier-slot-hooks","hyperfiddle.electric.impl.runtime/tier-slot-vars","hyperfiddle.electric.impl.runtime/tier-slot-remote","hyperfiddle.electric.impl.runtime/tier-slots","hyperfiddle.electric.impl.runtime/frame-slot-context","hyperfiddle.electric.impl.runtime/frame-slot-parent","hyperfiddle.electric.impl.runtime/frame-slot-id","hyperfiddle.electric.impl.runtime/frame-slot-position","hyperfiddle.electric.impl.runtime/frame-slot-foreign","hyperfiddle.electric.impl.runtime/frame-slot-static","hyperfiddle.electric.impl.runtime/frame-slot-dynamic","hyperfiddle.electric.impl.runtime/frame-slot-variables","hyperfiddle.electric.impl.runtime/frame-slot-sources","hyperfiddle.electric.impl.runtime/frame-slot-targets","hyperfiddle.electric.impl.runtime/frame-slot-inputs","hyperfiddle.electric.impl.runtime/frame-slot-tiers","hyperfiddle.electric.impl.runtime/frame-slot-constants","hyperfiddle.electric.impl.runtime/frame-slot-last-variable","hyperfiddle.electric.impl.runtime/frame-slot-last-constant","hyperfiddle.electric.impl.runtime/frame-slot-last-source","hyperfiddle.electric.impl.runtime/frame-slot-last-target","hyperfiddle.electric.impl.runtime/frame-slot-last-input","hyperfiddle.electric.impl.runtime/frame-slot-last-output","hyperfiddle.electric.impl.runtime/frame-slots","hyperfiddle.electric.impl.runtime/input-slot-frame","hyperfiddle.electric.impl.runtime/input-slot-notifier","hyperfiddle.electric.impl.runtime/input-slot-terminator","hyperfiddle.electric.impl.runtime/input-slot-current","hyperfiddle.electric.impl.runtime/input-slot-dirty","hyperfiddle.electric.impl.runtime/input-slot-check","hyperfiddle.electric.impl.runtime/input-slot-pending","hyperfiddle.electric.impl.runtime/input-slot-cancel","hyperfiddle.electric.impl.runtime/input-slots","hyperfiddle.electric.impl.runtime/output-slot-input","hyperfiddle.electric.impl.runtime/output-slot-id","hyperfiddle.electric.impl.runtime/output-slot-iterator","hyperfiddle.electric.impl.runtime/output-slot-current","hyperfiddle.electric.impl.runtime/output-slot-dirty","hyperfiddle.electric.impl.runtime/output-slot-done","hyperfiddle.electric.impl.runtime/output-slot-prev","hyperfiddle.electric.impl.runtime/output-slot-next","hyperfiddle.electric.impl.runtime/output-slot-time","hyperfiddle.electric.impl.runtime/output-slots","hyperfiddle.electric.impl.runtime/frame-id","n","t","tier","frame","id","hyperfiddle.electric.impl.runtime/t_hyperfiddle$electric$impl$runtime47844","G__47887","hyperfiddle.electric.impl.runtime/aswap","args-arr__5747__auto__","argseq__5748__auto__","seq47875","G__47877","G__47878","G__47879","G__47880","G__47881","G__47882","arr","slot","G__47896","a","G__47899","G__47900","b","G__47903","G__47904","G__47905","c","G__47909","G__47910","G__47911","G__47912","ds","hyperfiddle.electric.impl.runtime/make-context","G__47929","cljs.core/identity","cljs.core/transient","hyperfiddle.electric.impl.runtime/make-tier","parent","position","G__47933","hyperfiddle.electric.impl.runtime/inject-foreigns","vars","foreign","cljs.core/reduce-kv","m","sym","prev","cljs.core.get","proc","cljs.core/count","cljs.core.swap_BANG_","cljs.core/assoc","hyperfiddle.electric.impl.runtime/undo-foreigns","prevs","vrs","G__47945","hyperfiddle.electric.impl.runtime/init-statics","static","i","hyperfiddle.electric.impl.runtime/init-dynamic","node-sym","temp__5820__auto__","flow","hyperfiddle.electric.impl.runtime.aswap","hyperfiddle.electric.impl.runtime/init-dynamics","dynamics","p1__47957#","cljs.core/run!","hyperfiddle.electric.impl.runtime/ensure-node","env","node-info","cljs.core/contains?","fexpr__47962","hyperfiddle.electric.impl.runtime/init-nodes","get-used-nodes","seq__47967","cljs.core/seq","chunk__47968","count__47969","i__47970","temp__5816__auto__","cljs.core/chunked-seq?","c__5521__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","info","cljs.core/map?","G__47986","G__47987","G__47988","G__47989","G__47990","G__47991","G__47992","G__47993","hyperfiddle.electric.impl.runtime/make-frame","dynamic","variable-count","source-count","constant-count","target-count","output-count","input-count","buffer","boot","nm","tier-count","G__47997","n__5589__auto__","cljs.core/assoc!","result","hyperfiddle.electric.impl.runtime/input-ready","input","fexpr__48011","hyperfiddle.electric.impl.runtime/output-dirty","output","dirty","check","fexpr__48019","hyperfiddle.electric.impl.runtime/output-spawn","G__48022","G__48023","fexpr__48021","hyperfiddle.electric.impl.runtime/make-output","cljs.core/inc","hyperfiddle.electric.impl.runtime/input-cancel","fexpr__48033","hyperfiddle.electric.impl.runtime/input-change","hyperfiddle.electric.impl.runtime/input-freeze","fexpr__48043","hyperfiddle.electric.impl.runtime/update-event","seq48045","G__48046","G__48047","G__48048","k","temp__5818__auto__","event","cljs.core/update","fexpr__48054","hyperfiddle.electric.impl.runtime/input-check","path","hyperfiddle.electric.impl.runtime.update_event","cljs.core/conj","wpos","p","hyperfiddle.electric.impl.runtime/input-transfer","fexpr__48068","G__48073","fexpr__48076","hyperfiddle.electric.impl.runtime/make-input","deps","cljs.core.reduce","hyperfiddle.electric.impl.runtime/input-spawn","hyperfiddle.electric.impl.runtime/check-unbound-var","_debug-info","cljs.core/vector?","cljs.core/second","hyperfiddle.electric.impl.runtime/static","hyperfiddle.electric.impl.runtime/dynamic","symb","hyperfiddle.electric.impl.runtime/tree","tiers","v","cljs.core.conj","buf","G__48117","hyperfiddle.electric.impl.runtime/find-scope","s","cljs.core.into","cljs.core/keys","hyperfiddle.electric.impl.runtime/frame-walk-tiers","step","cb","start","size","back","back-inc-size","stop","hyperfiddle.electric.impl.runtime/tier-walk-frames","hyperfiddle.electric.impl.runtime/notify-rotate","anchor","target","hyperfiddle.electric.impl.runtime/array-call","fexpr__48131","hyperfiddle.electric.impl.runtime/map-vals-call","mp","p1__48132#","cljs.core/vals","hyperfiddle.electric.impl.runtime/frame-dispose","hyperfiddle.electric.impl.runtime/frame-rotate","to","from","cljs.core/compare","j","hyperfiddle.electric.impl.runtime/move","hyperfiddle.electric.impl.runtime/frame-cancel","pos","hyperfiddle.electric.impl.runtime/acopy","src","src-off","dest","dest-off","hyperfiddle.electric.impl.runtime/?grow-tier-buffer","cap","hyperfiddle.electric.impl.runtime/constructor","par","G__48147","args48146","hyperfiddle.electric.impl.runtime/FrameIterator","hyperfiddle.electric.impl.runtime/->FrameIterator","hyperfiddle.electric.impl.runtime/constant","ctor","consts","missionary.core/watch","cljs.core.atom","G__48148","G__48149","cljs.core/dissoc!","hyperfiddle.electric.impl.failer/run","hyperfiddle.electric.impl.runtime/inject","<y","foreigns","hyperfiddle.electric.impl.runtime/bind","seq48150","G__48151","e48152","fexpr__48153","hyperfiddle.electric.impl.runtime/with","cljs.core/vreset!","G__48155","hyperfiddle.electric.impl.runtime/clause","G__48156","hyperfiddle.electric.debug/unwrap","G__48157","hyperfiddle.electric.impl.runtime/recover","catch","hyperfiddle.electric.impl.yield2/yield","<c","G__48158","hyperfiddle.electric.impl.runtime/variable","<<x","cr48160-state","cr48160-place-14","cr48160-block-8","cr48160-exception","e48186","cr48160-block-13","cr48160-place-2","cr48160-block-2","missionary.core/switch","e48187","cr48160-place-3","cr48160-place-25","cr48160-block-12","e48188","cr48160-place-20","cr48160-place-21","cr48160-place-22","cljs.core/IMap","cr48160-place-23","cr48160-place-24","cr48160-block-10","e48189","cr48160-place-0","cr48160-place-26","cr48160-place-27","cr48160-place-28","cr48160-block-14","e48193","cr48160-place-12","cr48160-place-13","cr48160-block-6","cr48160-block-5","e48194","missionary.core/unpark","cr48160-place-4","cr48160-place-5","cr48160-place-6","cr48160-place-7","cr48160-block-11","cr48160-block-3","e48195","cr48160-place-1","cr48160-block-1","e48196","cr48160-place-11","e48197","cr48160-place-19","e48198","e48199","e48200","cr48160-place-8","cr48160-place-9","cr48160-place-10","cr48160-block-9","cr48160-block-4","e48201","cr48160-place-29","e48202","cr48160-place-15","cr48160-place-16","cr48160-place-17","cr48160-place-18","cr48160-block-7","e48203","G__48207","cr48160-block-0","G__48191","G__48192","fexpr__48190","cljs.core/ex-info","G__48205","G__48206","fexpr__48204","hyperfiddle.electric.impl.runtime/source","G__48208","hyperfiddle.electric.impl.runtime/target","hyperfiddle.electric.impl.runtime/hook","G__48209","G__48210","cljs.core/dissoc","hyperfiddle.electric.impl.runtime/unbound","hyperfiddle.electric.impl.runtime/subject-at","!","hyperfiddle.electric.impl.runtime/context-ack","rpos","cljs.core/dec","hyperfiddle.electric.impl.runtime/context-cancel","hyperfiddle.electric.impl.runtime/context-transfer","fexpr__48211","larger","split","o","hyperfiddle.electric.impl.runtime/eval-tree-inst","inst","G__48212","cljs.core/Keyword","map__48213","cljs.core/--destructure-map","vec__48214","vec__48217","target-frame","target-slot","source-frame","source-slot","G__48221","G__48222","fexpr__48220","p__48223","vec__48224","hyperfiddle.electric.impl.runtime/eval-change-inst","value","p__48227","vec__48228","hyperfiddle.electric.impl.runtime/eval-freeze-inst","p__48231","map__48232","hyperfiddle.electric.impl.runtime/parse-event","acks","tree","change","freeze","e48233","hyperfiddle.electric.impl.runtime/process-incoming-events",">incoming","missionary.core/sample","cljs.core/reduce","hyperfiddle.electric.impl.runtime/write-outgoing-events","write",">events","cr48234-state","cr48234-place-0","cr48234-place-1","cr48234-block-1","missionary.core/fork","cr48234-exception","e48246","cr48234-place-2","cr48234-place-3","cr48234-place-4","cr48234-place-5","cr48234-place-6","cr48234-place-7","cr48234-block-4","cr48234-block-2","e48247","cr48234-place-8","cr48234-place-9","cr48234-place-10","cr48234-block-3","missionary.core/park","e48251","cr48234-place-11","cr48234-block-5","e48254","cr48234-place-12","e48255","e48256","G__48257","cr48234-block-0","missionary.core/ap-run","G__48249","G__48250","fexpr__48248","cljs.core/=","G__48253","fexpr__48252","hyperfiddle.electric.impl.runtime/peer","?read","hyperfiddle$electric$impl$runtime$peer_$_rec","on-error","missionary.core/reactor-call","missionary.core/stream!","<main","e48258","cljs.core.prn","e48259","G__48260","missionary.core.relieve","cljs.core/into","cljs.core/vector","missionary.core/observe","hyperfiddle.electric.impl.runtime/collapse","seq48261","G__48262","G__48263","G__48264","cljs.core/iterate","cljs.core/pop","cljs.core.transduce","cljs.core.comp","cljs.core.map","cljs.core/peek","cljs.core.take","hyperfiddle.electric.impl.runtime/snapshot","seq48265","G__48266","G__48267","cljs.core.update","hyperfiddle.electric.impl.runtime/reverse-index","cljs.core/vec","cljs.core.repeat","hyperfiddle.electric.impl.runtime/empty-frame","hyperfiddle.electric.impl.runtime/sym","seq48268","self__5708__auto__","cljs.core.symbol","clojure.string.join","hyperfiddle.electric.impl.runtime/find-nodes","ir","cljs.core.distinct","cljs.core.completing","ac","nx","G__48269","hyperfiddle.electric.impl.ir-utils/->reducible","hyperfiddle.electric.impl.runtime/remove-dep-nodes","hyperfiddle.electric.impl.ir-utils/postwalk","G__48271","p1__48270#","cljs.core/filterv","cljs.core/not","hyperfiddle.electric.impl.runtime/tag-sym","jvm-hint","js-hint","cljs.core.vary_meta","hyperfiddle.electric.impl.runtime/compile","prefix","nodes","hyperfiddle.electric.impl.runtime.sym","ctor-at","expr-at","restore-free","free","cljs.core/List","capture-free","cljs.core.sequence","cljs.core.concat","cljs.core.eduction","cljs.core.map_indexed","emit-exprs","exprs","expr","cljs.core/cat","update-current","ctors","from-last-expr","add-many","p__48274","vec__48275","arg","off","idx","dyn","G__48278","_env","G__48279","G__48280","walk","form","cont","G__48281","G__48282","vec__48283","G__48286","G__48287","d","G__48288","G__48289","G__48290","G__48291","G__48292","G__48293","hyperfiddle.electric.impl.ir/eval","vec__48294","vec__48297","cljs.core/cons","forms","vec__48300","vec__48303","p1__48272#","cljs.core.filter","cljs.core.dissoc","G__48306","G__48307","cljs.core.mapv","p1__48273#","vec__48308","cljs.core.ex_info","nvariable","nsource","nconstant","ntarget","noutput","ninput","code","G__48311","G__48312","cljs.core.println","cljs.pprint.pprint","hyperfiddle.electric.impl.runtime/get-used-nodes-recursively","walked","unwalked","vec__48317","seq__48318","first__48319","to-walk","fexpr__48320","hyperfiddle.electric.impl.runtime/main","map__48322","G__48323","cljs.core/var?","all-nodes","cljs.core/merge-with","cljs.core/+","p1__48321#","hyperfiddle.electric.impl.runtime/case-default-throw","hyperfiddle.electric.impl.runtime/pick-case-branch","seq48324","G__48325","G__48326","G__48327","picker-map","default-branch","branches"],"sourcesContent":["(ns ^:no-doc hyperfiddle.electric.impl.runtime\r\n  (:refer-clojure :exclude [compile])\r\n  (:require [hyperfiddle.electric.impl.yield2 :refer [yield]]\r\n            [hyperfiddle.electric.impl.failer :as failer]\r\n            [hyperfiddle.electric.impl.lang :as-alias lang]\r\n            [hyperfiddle.electric.impl.local :as l]\r\n            [hyperfiddle.electric.impl.ir :as ir]\r\n            [hyperfiddle.electric.debug :as dbg]\r\n            [missionary.core :as m]\r\n            [hyperfiddle.rcf :refer [tests]]\r\n            [clojure.pprint :as pp]\r\n            [clojure.string :as str]\r\n            [contrib.data :as data]\r\n            [contrib.assert :as ca]\r\n            [hyperfiddle.electric.impl.ir-utils :as ir-utils])\r\n  (:import missionary.Cancelled\r\n           (hyperfiddle.electric Failure Pending Remote)\r\n           #?(:clj (clojure.lang IFn IDeref Atom))))\r\n\r\n;; An Electric program is a tree, which structure is dynamically maintained.\r\n;; Two peers are synchronized (through a protocol) such that the tree structure is identicaly on both peers.\r\n;; Two type of nodes:\r\n;; [Frames] : A piece of DAG with a static structure. Won't be rearanged at runtime. (AKA Static Frame)\r\n;;            - A set of compiled s-expressions + a set of signals weaving these expressions + N inputs + N outputs\r\n;;            - A frame has 2 instances, one on client, one on server.\r\n;;            - Server's outputs are client's inputs and vice-versa.\r\n;;            - Frames are processes.\r\n;;            - Image: a stackframe but for a DAG. A stackframe is allocated to compute the result of a function.\r\n;;              It is volatile (disposable) in a stack-based program. Since Electric is reactive, the frame is not disposable.\r\n;;              \u00abReactiveFrame\u00bb \u00abDistributed Reactive Frame\u00bb\r\n;; [Tiers] : For each `new` in a frame, a managed process is created. Tiers are child processes of frames. (AKA Dynamic Frame)\r\n;;             - Parent process of a tier is always a frame.\r\n;;             - Parent process of a frame is alawys a tier.\r\n;;             - Specificity: Frames have a fixed set of children, tiers have a dynamic set of children, they can spawn new frames anytime.\r\n;;                            Child frames of a tier are positioned (there is a well defined traversal order)\r\n;;                            Node order (positions) can change at runtime because tiers can spawn dynamically (e.g.: p/for).\r\n;;             - Some tiers don't have child frames : e.g. (new (m/watch .)), no child frames, no input, no output\r\n;;             - Some frames don't have child tiers : e.g. a frame without any `new`, no variability.\r\n;;             - (image: an ordered tree with different kind of nodes at each generation)\r\n\r\n;; Network protocol\r\n;; Each peer streams events to its remote peer via a bidirectional channel. An event is a clojure map with 4 entries :\r\n;; * :acks is a non-negative integer counting the number of non-empty changesets received by the peer sending the event\r\n;;   since the previous event was sent.\r\n;; * :tree is a vector of tree instructions. Order of instructions matters. A tree instruction describes an atomic mutation of the tree, it is a map\r\n;;   with a mandatory :op entry defining the instruction type and defining the rest of the keyset. Instructions are :\r\n;;   * :create appends a new frame at the end of a tier, owned by the peer sending the event. The frame constructor is\r\n;;     defined by the entry :target, the endpoint is defined by the entry :source. Both are ordered pairs of two\r\n;;     numbers, the frame id and the position of the target or the source in the frame.\r\n;;   * :rotate performs of cyclic permutation of frames in a tier, owned by the peer sending the event. The frame\r\n;;     identified by the :frame entry is moved to position defined by the :position entry. If the cycle is trivial (A -> A), the\r\n;;     frame is removed.\r\n;;   * :remove dissociates a frame from the index. legacy hack, should be removed.\r\n;; * :change is a map associating ports with values. A port is absolute for the system, inputs and output relative terms for a port (it only make sense from a single peer perspective).\r\n;;   A port is represented as an ordered pair of two numbers, a frame id\r\n;;   and the position of this port in the frame. The value is the new state of port. (:assign could be a synonym)\r\n;; * :freeze is a set of ports. Each port present in this set must be considered terminated (i.e. its state won't ever\r\n;;   change again).\r\n;; A frame id is negative if the frame is owned by the peer sending the event, positive if the frame is owned by the\r\n;; peer receiving the event, zero is the root frame.\r\n\r\n(defn fail [exception _in-scope-stacktrace]\r\n  ;; When throwing from a `catch` block, we want to throw an exception while preserving the stack trace of the exception that triggered the catch block.\r\n  ;; first arg is the exception we want to throw\r\n  ;; second arg is the exception in scope (if we are in a catch block) or nil\r\n  ;; second arg is ignored here, but being part of the arguments, it will be\r\n  ;; visible to `latest-apply` and so be part of the async stack trace.\r\n  ;; See `handle-apply-error`.\r\n  (throw exception))\r\n\r\n(def failure (some-fn #(when (instance? Failure %) %)))\r\n\r\n(def pending (Failure. (Pending.)))\r\n\r\n(defn error [^String msg] ; Could be ex-info (ExceptionInfo inherits Error or js/Error)\r\n  (#?(:clj Error. :cljs js/Error.) msg))\r\n\r\n(defn pst [e]\r\n  #?(:clj (.printStackTrace ^Throwable e)\r\n     :cljs (js/console.error e)))\r\n\r\n(defn select-debug-info [debug-info]\r\n  (merge (select-keys debug-info [::ir/op]) (data/select-ns :hyperfiddle.electric.debug debug-info)))\r\n\r\n(defn check-failure [debug-info <x]\r\n  (m/latest (fn [x]\r\n              (if (instance? Failure x)\r\n                (dbg/error (select-debug-info debug-info) x)\r\n                x)) <x))\r\n\r\n(defn handle-apply-error [debug-info args error]\r\n  (if (= `fail (::dbg/name debug-info))\r\n    (let [[thrown context] args]\r\n      (dbg/error (assoc (select-debug-info debug-info) ::dbg/args [thrown]) (Failure. error) context))\r\n    (dbg/error (assoc (select-debug-info debug-info) ::dbg/args args) (Failure. error))))\r\n\r\n(defn latest-apply [debug-info & args]\r\n  (ca/check (partial every? some?) args debug-info)\r\n  (apply m/latest\r\n    (fn [f & args]\r\n      (if-let [err (apply failure f args)]\r\n        (dbg/error (assoc (select-debug-info debug-info) ::dbg/args args) err)\r\n        (try (apply f args)\r\n             (catch #?(:clj Throwable :cljs :default) e\r\n               (handle-apply-error debug-info args e)))))\r\n    args))\r\n\r\n(defn causal [debug-info x y]\r\n  (m/latest\r\n    (fn [x y]\r\n      (let [args [x y]]\r\n        (if-let [err (failure x y)]\r\n          (dbg/error (assoc debug-info ::dbg/args args) err)\r\n          ({} x y))))\r\n    x y))\r\n\r\n(def latest-first\r\n  (partial m/latest\r\n    (fn [x y] (if (instance? Failure y) y x))))\r\n\r\n(defn pure [x] (m/cp x))\r\n\r\n(def empty-event\r\n  {:acks 0\r\n   :tree []\r\n   :change {}\r\n   :freeze #{}})\r\n\r\n(deftype It [state cancel transfer]\r\n  IFn\r\n  (#?(:clj invoke :cljs -invoke) [_]\r\n    (cancel state))\r\n  IDeref\r\n  (#?(:clj deref :cljs -deref) [_]\r\n    (transfer state)))\r\n\r\n(def lift-cancelled\r\n  (partial comp\r\n    (fn [it]\r\n      (reify\r\n        IFn\r\n        (#?(:clj invoke :cljs -invoke) [_] (it))\r\n        IDeref\r\n        (#?(:clj deref :cljs -deref) [_]\r\n          (try @it (catch Cancelled e (Failure. e))))))))\r\n\r\n(defn signal [<x]\r\n  (m/signal! (lift-cancelled <x)))\r\n\r\n(def this (l/local))\r\n\r\n(def context-slot-root            (int 0))   ;; Immutable. The root frame.\r\n(def context-slot-local-id        (int 1))   ;; The next local id (auto incremented).\r\n(def context-slot-remote-id       (int 2))   ;; The next remote id (auto decremented).\r\n(def context-slot-pending-rpos    (int 3))   ;; The reading position in the pending circular buffer.\r\n(def context-slot-pending-wpos    (int 4))   ;; The writing position in the pending circular buffer.\r\n(def context-slot-pending-buffer  (int 5))   ;; The pending circular buffer of outputs changed for each message sent.\r\n(def context-slot-frame-store     (int 6))   ;; A transient map associating frame ids to frame objects.\r\n(def context-slot-event           (int 7))   ;; The next event to transfer.\r\n(def context-slot-check           (int 8))   ;; The set of inputs that must be checked on next event transfer.\r\n(def context-slot-notifier        (int 9))   ;; The notifier callback\r\n(def context-slot-terminator      (int 10))  ;; The terminator callback\r\n(def context-slot-incoming        (int 11))  ;; The incoming callback\r\n(def context-slots                (int 12))\r\n\r\n(def tier-slot-parent   (int 0))    ;; Immutable. The parent frame.\r\n(def tier-slot-position (int 1))    ;; Immutable. The static position of the tier in the parent frame.\r\n(def tier-slot-buffer   (int 2))    ;; Buffer of array list of child frames.\r\n(def tier-slot-size     (int 3))    ;; Size of array list of child frames.\r\n(def tier-slot-foreigns (int 4))    ;; Foreign flow map\r\n(def tier-slot-hooks    (int 5))    ;; Hooks\r\n(def tier-slot-vars     (int 6))    ;; A snapshot of the dynamic environment.\r\n(def tier-slot-remote   (int 7))    ;; If local, the slot of the remote part.\r\n(def tier-slots         (int 8))\r\n\r\n(def frame-slot-context   (int 0))  ;; Immutable. The global context.\r\n(def frame-slot-parent    (int 1))  ;; Immutable. The parent tier, nil iff root frame.\r\n(def frame-slot-id        (int 2))  ;; Immutable. Zero if root frame, a strictly positive number if the frame was created by a variable, a strictly negative number if the frame was created by a source.\r\n(def frame-slot-position  (int 3))  ;; The index of the frame among its siblings.\r\n(def frame-slot-foreign   (int 4))  ;; Immutable\r\n(def frame-slot-static    (int 5))  ;; Immutable\r\n(def frame-slot-dynamic   (int 6))  ;; Immutable\r\n(def frame-slot-variables (int 7))  ;; Immutable\r\n(def frame-slot-sources   (int 8))  ;; Immutable\r\n(def frame-slot-targets   (int 9))  ;; Immutable\r\n(def frame-slot-inputs    (int 10)) ;; Immutable\r\n(def frame-slot-tiers     (int 11)) ;; Immutable\r\n(def frame-slot-constants (int 12)) ;; Immutable\r\n(def frame-slot-last-variable (int 13))\r\n(def frame-slot-last-constant (int 14))\r\n(def frame-slot-last-source (int 15))\r\n(def frame-slot-last-target (int 16))\r\n(def frame-slot-last-input (int 17))\r\n(def frame-slot-last-output (int 18))\r\n(def frame-slots          (int 19))\r\n\r\n(def input-slot-frame      (int 0))                         ;; parent frame\r\n(def input-slot-notifier   (int 1))                         ;; consumer notifier\r\n(def input-slot-terminator (int 2))                         ;; consumer terminator\r\n(def input-slot-current    (int 3))                         ;; current state\r\n(def input-slot-dirty      (int 4))                         ;; head of linked list of dirty outputs\r\n(def input-slot-check      (int 5))                         ;; next item in linked list of check inputs\r\n(def input-slot-pending    (int 6))                         ;; number of outputs waiting for ack\r\n(def input-slot-cancel     (int 7))                         ;; nil when no pending transfer, otherwise cancel status\r\n(def input-slots           (int 8))\r\n\r\n(def output-slot-input    (int 0))                          ;; parent input\r\n(def output-slot-id       (int 1))                          ;; output id, relative to parent frame\r\n(def output-slot-iterator (int 2))                          ;; producer iterator\r\n(def output-slot-current  (int 3))                          ;; current state\r\n(def output-slot-dirty    (int 4))                          ;; tail of linked list of dirty outputs\r\n(def output-slot-done     (int 5))                          ;; frozen\r\n(def output-slot-prev     (int 6))                          ;; previous item in doubly linked list of pending outputs\r\n(def output-slot-next     (int 7))                          ;; next item in doubly linked list of pending outputs\r\n(def output-slot-time     (int 8))                          ;; position of the doubly linked list of pending outputs in the circular buffer, nil if not pending\r\n(def output-slots         (int 9))\r\n\r\n(defn frame-id []\r\n  (fn [n t]\r\n    (let [^objects tier (l/get-local this)\r\n          ^objects frame (aget tier tier-slot-parent)\r\n          id (aget frame frame-slot-id)]\r\n      (n) (reify\r\n            IFn (#?(:clj invoke :cljs -invoke) [_])\r\n            IDeref (#?(:clj deref :cljs -deref) [_] (t) id)))))\r\n\r\n(defn aswap\r\n  ([^objects arr slot f]\r\n   (aset arr slot (f (aget arr slot))))\r\n  ([^objects arr slot f a]\r\n   (aset arr slot (f (aget arr slot) a)))\r\n  ([^objects arr slot f a b]\r\n   (aset arr slot (f (aget arr slot) a b)))\r\n  ([^objects arr slot f a b c]\r\n   (aset arr slot (f (aget arr slot) a b c)))\r\n  ([^objects arr slot f a b c & ds]\r\n   (aset arr slot (apply f (aget arr slot) a b c ds))))\r\n\r\n(defn make-context ^objects []\r\n  (doto (object-array context-slots)\r\n    (aset context-slot-local-id (identity 0))\r\n    (aset context-slot-remote-id (identity 0))\r\n    (aset context-slot-pending-rpos (identity 0))\r\n    (aset context-slot-pending-wpos (identity 0))\r\n    (aset context-slot-pending-buffer (object-array 2))\r\n    (aset context-slot-frame-store (transient {}))))\r\n\r\n(defn make-tier [^objects parent position]\r\n  (aset ^objects (aget parent frame-slot-tiers) (int position)\r\n    (doto (object-array tier-slots)\r\n      (aset tier-slot-parent parent)\r\n      (aset tier-slot-position position)\r\n      (aset tier-slot-buffer (object-array 8))\r\n      (aset tier-slot-size (identity (int 0)))\r\n      (aset tier-slot-foreigns {})\r\n      (aset tier-slot-hooks {}))))\r\n\r\n(defn inject-foreigns [frame vars foreign]\r\n  (reduce-kv\r\n    (fn [m sym <x]\r\n      (let [prev (get @vars sym)\r\n            proc (signal <x)]\r\n        (aset ^objects (aget frame frame-slot-foreign) (count m) proc)\r\n        (swap! vars assoc sym proc)\r\n        (assoc m sym prev)))\r\n    {} foreign))\r\n\r\n(defn undo-foreigns [vars prevs] (reduce-kv (fn [vrs sym <x] (doto vrs (swap! assoc sym <x))) vars prevs))\r\n\r\n(defn init-statics [frame static]\r\n  (reduce-kv (fn [^objects arr i <x]\r\n               (aset arr (int i) (signal <x)) arr)\r\n    (aget frame frame-slot-static) static))\r\n\r\n(defn- init-dynamic [vars node-sym frame]\r\n  (when-some [flow (get vars node-sym)]\r\n    (aswap frame frame-slot-dynamic assoc node-sym (signal flow))))\r\n\r\n(defn- init-dynamics [frame vars dynamics]\r\n  (run! #(init-dynamic @vars % frame) dynamics))\r\n\r\n(defn ensure-node [frame vars env node-info]\r\n  (let [node-sym (:var-name node-info)]\r\n    (when-not (contains? @vars node-sym)\r\n      (init-dynamics frame vars (:dynamic node-info))\r\n      (let [flow ((:fn node-info) frame vars env)]\r\n        (swap! vars assoc node-sym flow)))))\r\n\r\n(defn- init-nodes [frame vars env get-used-nodes]\r\n  (doseq [info (get-used-nodes)]\r\n    (when (map? info)                   ; skip unbound nodes\r\n      (init-nodes frame vars env (:get-used-nodes info))\r\n      (ensure-node frame vars env info))))\r\n\r\n(defn make-frame [^objects context parent id position\r\n                  foreign static dynamic variable-count source-count\r\n                  constant-count target-count output-count input-count\r\n                  ^objects buffer ^objects vars boot get-used-nodes nm env] ; nm is short for \"name\" and it should contain the name of the e/def\r\n  ;; this is a runtime print and it should print on both client and server, with\r\n  ;; frame ids. Helpfull to diagnose missaligend client/sever DAGs\r\n  (let [tier-count (+ variable-count source-count)\r\n        frame (doto (object-array frame-slots)\r\n                (aset frame-slot-context context)\r\n                (aset frame-slot-parent parent)\r\n                (aset frame-slot-id id)\r\n                (aset frame-slot-position position)\r\n                (aset frame-slot-foreign (object-array (count foreign)))\r\n                (aset frame-slot-static (object-array (count static)))\r\n                (aset frame-slot-dynamic {})\r\n                (aset frame-slot-variables (object-array variable-count))\r\n                (aset frame-slot-sources (object-array source-count))\r\n                (aset frame-slot-targets (object-array target-count))\r\n                (aset frame-slot-inputs (object-array input-count))\r\n                (aset frame-slot-tiers (object-array tier-count))\r\n                (aset frame-slot-constants (object-array constant-count))\r\n                (aset frame-slot-last-variable -1)\r\n                (aset frame-slot-last-constant -1)\r\n                (aset frame-slot-last-source -1)\r\n                (aset frame-slot-last-target -1)\r\n                (aset frame-slot-last-input -1)\r\n                (aset frame-slot-last-output -1))]\r\n    (dotimes [i tier-count] (make-tier frame i))\r\n    (aset buffer (int position) frame)\r\n    (aswap context context-slot-frame-store assoc! id frame)\r\n    (let [prevs (inject-foreigns frame vars foreign)]\r\n      (init-statics frame static)\r\n      (init-nodes frame vars env get-used-nodes)\r\n      (init-dynamics frame vars dynamic)\r\n      ;; (prn :make-frame nm dynamic @(aget frame frame-slot-dynamic))\r\n      (let [result (boot frame vars env)]\r\n        (undo-foreigns vars prevs)\r\n        result))))\r\n\r\n(defn input-ready [^objects input]\r\n  (when (nil? (aget input input-slot-cancel))\r\n    (aset input input-slot-cancel false)\r\n    ((aget input input-slot-notifier))))\r\n\r\n(defn output-dirty [^objects output]\r\n  (let [^objects input (aget output output-slot-input)\r\n        ^objects dirty (aget input input-slot-dirty)]\r\n    (aset output output-slot-dirty dirty)\r\n    (aset input input-slot-dirty output)\r\n    (when (nil? dirty)\r\n      (when (identical? input (aget input input-slot-check))\r\n        (let [^objects frame (aget input input-slot-frame)\r\n              ^objects context (aget frame frame-slot-context)\r\n              ^objects check (aget context context-slot-check)]\r\n          (aset context context-slot-check input)\r\n          (aset input input-slot-check check)\r\n          (when (nil? (aget context context-slot-event))\r\n            (aset context context-slot-event empty-event)\r\n            ((aget context context-slot-notifier))))))\r\n    (input-ready input)))\r\n\r\n(defn output-spawn [^objects input ^objects output]\r\n  (when-not (nil? output)\r\n    (aset output output-slot-input input)\r\n    (aset output output-slot-iterator\r\n      ((aget output output-slot-iterator)\r\n       (fn [] (output-dirty output))\r\n       (fn []\r\n         (aset output output-slot-done true)\r\n         (output-dirty output)))))\r\n  input)\r\n\r\n(defn make-output [frame <x]\r\n  (let [output (object-array output-slots)\r\n        id (aswap frame frame-slot-last-output inc)]\r\n    (aset output output-slot-id id)\r\n    (aset output output-slot-done false)\r\n    (aset output output-slot-prev output)\r\n    (aset output output-slot-next output)\r\n    (aset output output-slot-dirty output)\r\n    (aset output output-slot-current output)\r\n    (aset output output-slot-iterator <x)\r\n    output))\r\n\r\n(defn input-cancel [^objects input]\r\n  (let [c (aget input input-slot-cancel)]\r\n    (aset input input-slot-cancel true)\r\n    (when (nil? c) ((aget input input-slot-notifier)))))\r\n\r\n(defn input-change [^objects input x]\r\n  (aset input input-slot-current x)\r\n  (input-ready input))\r\n\r\n(defn input-freeze [^objects input]\r\n  (aset input input-slot-pending -1)\r\n  (when (nil? (aget input input-slot-cancel))\r\n    (aset input input-slot-cancel false)\r\n    ((aget input input-slot-terminator))))\r\n\r\n(defn update-event [^objects context k f & args]\r\n  (if-some [event (aget context context-slot-event)]\r\n    (aset context context-slot-event (apply update event k f args))\r\n    (do (aset context context-slot-event (apply update empty-event k f args))\r\n        ((aget context context-slot-notifier)))))\r\n\r\n(defn input-check [^objects input]\r\n  (let [^objects frame (aget input input-slot-frame)\r\n        ^objects context (aget frame frame-slot-context)]\r\n    (loop []\r\n      (if-some [^objects output (aget input input-slot-dirty)]\r\n        (let [path [(- (aget frame frame-slot-id)) (aget output output-slot-id)]]\r\n          (aset input input-slot-dirty (aget output output-slot-dirty))\r\n          (aset output output-slot-dirty output)\r\n          (if (aget output output-slot-done)\r\n            (update-event context :freeze conj path)\r\n            (let [x @(aget output output-slot-iterator)]\r\n              (when-not (= (aget output output-slot-current) (aset output output-slot-current x))\r\n                (let [^objects buffer (aget context context-slot-pending-buffer)\r\n                      wpos (aget context context-slot-pending-wpos)]\r\n                  (if-some [t (aget output output-slot-time)]\r\n                    (let [^objects p (aget output output-slot-prev)\r\n                          ^objects n (aget output output-slot-next)]\r\n                      (aset buffer t\r\n                        (when-not (identical? p output)\r\n                          (aset p output-slot-next n)\r\n                          (aset n output-slot-prev p))))\r\n                    (aswap input input-slot-pending inc))\r\n                  (aset output output-slot-time wpos)\r\n                  (if-some [^objects p (aget buffer wpos)]\r\n                    (let [^objects n (aget p output-slot-next)]\r\n                      (aset p output-slot-next output)\r\n                      (aset n output-slot-prev output)\r\n                      (aset output output-slot-prev p)\r\n                      (aset output output-slot-next n))\r\n                    (do (aset buffer wpos output)\r\n                        (aset output output-slot-prev output)\r\n                        (aset output output-slot-next output)))\r\n                  (update-event context :change assoc path x)))))\r\n          (recur))))))\r\n\r\n(defn input-transfer [^objects input]\r\n  (input-check input)\r\n  (if (aget input input-slot-cancel)\r\n    (do ((aget input input-slot-terminator))\r\n        (throw (Cancelled.)))\r\n    (case (aget input input-slot-pending)\r\n      -1 (do ((aget input input-slot-terminator))\r\n             (aget input input-slot-current))\r\n      0 (do (aset input input-slot-cancel nil)\r\n            (aget input input-slot-current))\r\n      (do (aset input input-slot-cancel nil)\r\n          pending))))\r\n\r\n(defn make-input [^objects frame deps]\r\n  (let [input (object-array input-slots)]\r\n    (aset input input-slot-frame frame)\r\n    (aset input input-slot-pending 0)\r\n    (aset input input-slot-current pending)\r\n    (aset input input-slot-cancel false)\r\n    (aset input input-slot-check input)\r\n    (reduce output-spawn input deps)))\r\n\r\n(defn input-spawn [^objects frame deps]\r\n  (let [slot (aswap frame frame-slot-last-input inc)]\r\n    (m/signal! ;; inputs are cancelled when reactor is cancelled\r\n      (fn [n t]\r\n        (let [input (make-input frame deps)]\r\n          (aset input input-slot-notifier n)\r\n          (aset input input-slot-terminator t)\r\n          (aset ^objects (aget frame frame-slot-inputs) (int slot) input)\r\n          (n) (->It input input-cancel input-transfer))))))\r\n\r\n(defn check-unbound-var [_debug-info <x]\r\n  (m/latest (fn [x]\r\n              (if (and (vector? x) (= :hyperfiddle.electric.impl.lang/unbound (first x)))\r\n                (Failure. (error (str \"Unbound electric var `\" (second x) \"`\")))\r\n                x)) <x))\r\n\r\n(defn static [^objects frame slot]\r\n  (aget ^objects (aget frame frame-slot-static) (int slot)))\r\n\r\n(defn dynamic [^objects frame symb debug-info]\r\n  (check-unbound-var debug-info (ca/check some? (get (aget frame frame-slot-dynamic) symb) debug-info)))\r\n\r\n(defn tree\r\n  \"A snapshot of the tree below given frame, as nested vectors. Frame vectors start with their id.\"\r\n  [^objects f]\r\n  (let [^objects tiers (aget f frame-slot-tiers)]\r\n    (loop [v []\r\n           i (int 0)]\r\n      (if (== i (alength tiers))\r\n        {:id (aget f frame-slot-id)\r\n         :inputs (alength ^objects (aget f frame-slot-inputs))\r\n         :targets (alength ^objects (aget f frame-slot-targets))\r\n         :sources (alength ^objects (aget f frame-slot-sources))\r\n         :tiers v}\r\n        (recur\r\n          (conj v\r\n            (let [^objects tier (aget tiers i)\r\n                  ^objects buf (aget tier tier-slot-buffer)]\r\n              (loop [v []\r\n                     i (int 0)]\r\n                (if (== i (aget tier tier-slot-size))\r\n                  v (recur (conj v (tree (aget buf i)))\r\n                      (inc i))))))\r\n          (inc i))))))\r\n\r\n(defn find-scope [f]\r\n  (loop [f f\r\n         s #{}]\r\n    (if-some [^objects tier (aget ^objects f frame-slot-parent)]\r\n      (recur (aget tier tier-slot-parent)\r\n        (into s (keys (aget tier tier-slot-hooks)))) s)))\r\n\r\n(declare tier-walk-frames)\r\n(defn frame-walk-tiers [^objects frame step k cb start]\r\n  (let [^objects tiers (aget frame frame-slot-tiers)\r\n        size (alength tiers)\r\n        back (bit-shift-right (- 1 step) 1)\r\n        back-inc-size (* back (inc size))\r\n        stop (- size back-inc-size)]\r\n    (loop [i (if (nil? start) (dec back-inc-size) start)]\r\n      (let [i (+ i step)]\r\n        (when-not (== i stop)\r\n          (if-some [x (let [^objects tier (aget tiers i)]\r\n                        (if-some [v (get (aget tier tier-slot-hooks) k)]\r\n                          (cb v) (tier-walk-frames tier step k cb nil)))]\r\n            x (recur i)))))))\r\n\r\n(defn tier-walk-frames [^objects tier step k cb start]\r\n  (let [^objects buf (aget tier tier-slot-buffer)\r\n        size (aget tier tier-slot-size)\r\n        back (bit-shift-right (- 1 step) 1)\r\n        back-inc-size (* back (inc size))\r\n        stop (- size back-inc-size)]\r\n    (loop [i (if (nil? start) (dec back-inc-size) start)]\r\n      (let [i (+ i step)]\r\n        (when-not (== i stop)\r\n          (if-some [x (frame-walk-tiers (aget buf i) step k cb nil)]\r\n            x (recur i)))))))\r\n\r\n(defn notify-rotate [f k]\r\n  (let [anchor (loop [^objects f f]\r\n                 (let [tier ^objects (aget f frame-slot-parent)]\r\n                   (when-not (contains? (aget tier tier-slot-hooks) k)\r\n                     (if-some [a (tier-walk-frames tier 1 k identity\r\n                                   (aget f frame-slot-position))]\r\n                       a (recur (aget tier tier-slot-parent))))))]\r\n    (frame-walk-tiers f 1 k (fn [target] (k target anchor)) nil) f))\r\n\r\n(defn array-call [^objects arr]\r\n  (dotimes [i (alength arr)]\r\n    ((aget arr i))))\r\n\r\n(defn map-vals-call [mp] (run! #(%) (vals mp)))\r\n\r\n(defn frame-dispose [^objects f]\r\n  (aset f frame-slot-position nil)\r\n  (array-call (aget f frame-slot-static))\r\n  (map-vals-call (aget f frame-slot-dynamic))\r\n  (array-call (aget f frame-slot-foreign))\r\n  (array-call (aget f frame-slot-variables))\r\n  (array-call (aget f frame-slot-constants)))\r\n\r\n(defn frame-rotate [^objects f to]\r\n  (let [from (aget f frame-slot-position)\r\n        step (compare to from)\r\n        ^objects tier (aget f frame-slot-parent)\r\n        ^objects buf (aget tier tier-slot-buffer)]\r\n    (if (== to from)\r\n      (let [size (dec (aget tier tier-slot-size))]\r\n        (loop [i to]\r\n          (when-not (== i size)\r\n            (let [j (inc i)\r\n                  y (aget buf (int j))]\r\n              (aset ^objects y frame-slot-position i)\r\n              (aset buf (int i) y)\r\n              (recur j))))\r\n        (aset tier tier-slot-size size)\r\n        (aset buf (int size) nil)\r\n        (frame-dispose f))\r\n      (do (loop [i from]\r\n            (let [j (+ i step)\r\n                  ^objects y (aget buf (int j))]\r\n              (aset y frame-slot-position i)\r\n              (aset buf (int i) y)\r\n              (when-not (== to j) (recur j))))\r\n          (aset f frame-slot-position to)\r\n          (aset buf (int to) f)\r\n          (reduce notify-rotate f\r\n            (find-scope f))))))\r\n\r\n(defn move\r\n  \"Move a frame. If origin position is equal to target position, frame is removed. Will search and call `hook`.\"\r\n  ([^objects tier from to]\r\n   (let [f (aget ^objects (aget tier tier-slot-buffer) (int from))]\r\n     (update-event (aget f frame-slot-context) :tree conj\r\n       {:op       :rotate\r\n        :frame    (- (aget f frame-slot-id))\r\n        :position to})\r\n     (frame-rotate f to))))\r\n\r\n(defn frame-cancel [^objects f]\r\n  (when-some [pos (aget f frame-slot-position)]\r\n    (update-event (aget f frame-slot-context) :tree conj\r\n      {:op       :rotate\r\n       :frame    (- (aget f frame-slot-id))\r\n       :position pos})\r\n    (frame-rotate f pos)))\r\n\r\n(defn acopy [src src-off dest dest-off size]\r\n  #?(:clj (System/arraycopy src src-off dest dest-off size))\r\n  #?(:cljs (dotimes [i size] (aset dest (+ dest-off i) (aget src (+ src-off i)))))\r\n  dest)\r\n\r\n(defn- ?grow-tier-buffer [tier pos]\r\n  (let [^objects buf (aget tier tier-slot-buffer), cap (alength buf)]\r\n    (if (< pos cap)\r\n      buf\r\n      (aset tier tier-slot-buffer\r\n        (acopy buf 0 (object-array (bit-shift-left cap 1)) 0 cap)))))\r\n\r\n(defn constructor [dynamic variable-count source-count constant-count target-count output-count input-count boot]\r\n  (fn [env static]\r\n    (fn [^objects tier id]\r\n      (let [^objects par (aget tier tier-slot-parent)\r\n            pos (aget tier tier-slot-size)\r\n            ^objects buf (?grow-tier-buffer tier pos)]\r\n        (aset tier tier-slot-size (inc pos))\r\n        (make-frame (aget par frame-slot-context)\r\n          tier id pos (aget tier tier-slot-foreigns) static dynamic\r\n          variable-count source-count constant-count target-count output-count input-count\r\n          buf (aget tier tier-slot-vars) boot (fn get-used-nodes []) :constructor env)))))\r\n\r\n(deftype FrameIterator [f it]\r\n  IFn\r\n  (#?(:clj invoke :cljs -invoke) [_] (frame-cancel f))\r\n  IDeref\r\n  (#?(:clj deref :cljs -deref) [_] @it))\r\n\r\n;; Takes an instruction identifying a target and a frame-constructor.\r\n;; Return a flow instantiating the frame.\r\n(defn constant [^objects frame ctor]\r\n  (let [slot (aswap frame frame-slot-last-constant inc)\r\n        ^objects consts (aget frame frame-slot-constants)\r\n        ^objects context (aget frame frame-slot-context)]\r\n    (aset consts slot\r\n      (signal\r\n        (m/watch\r\n          (atom\r\n            (fn [n t]\r\n              (if-some [^objects tier (l/get-local this)]\r\n                (let [parent (aget tier tier-slot-parent)\r\n                      id (aswap context context-slot-local-id inc)]\r\n                  (update-event context :tree conj\r\n                    {:op     :create\r\n                     :target [(- (aget frame frame-slot-id)) slot]\r\n                     :source [(- (aget parent frame-slot-id)) (aget tier tier-slot-remote)]})\r\n                  (let [<x (ctor tier id)\r\n                        ^objects f (get (aget context context-slot-frame-store) id)]\r\n                    (->FrameIterator f\r\n                      (<x n #(do (frame-cancel f)\r\n                                 (update-event context :tree conj {:op :remove :frame (- id)})\r\n                                 (aswap context context-slot-frame-store dissoc!\r\n                                   (aget f frame-slot-id)) (t))))))\r\n                (failer/run (error \"Unable to build frame - not an object.\") n t)))))))))\r\n\r\n(defn inject [v]\r\n  (fn [<x <y]\r\n    (fn [n t]\r\n      ;; TODO make result depend on <y to catch failures, in case binding is ignored\r\n      (if-some [^objects tier (l/get-local this)]\r\n        (let [foreigns (aget tier tier-slot-foreigns)]\r\n          (aset tier tier-slot-foreigns (assoc foreigns v <y))\r\n          (try (<x n t) (finally (aset tier tier-slot-foreigns foreigns))))\r\n        (failer/run (error \"Unable to inject - not an object.\") n t)))))\r\n\r\n(defn bind [f & args]\r\n  (fn [n t]\r\n    (if-some [tier (l/get-local this)]\r\n      (try ((apply f tier args) n t) ; hook tier and pass to userland !\r\n           (catch #?(:clj Throwable :cljs :default) e\r\n             (failer/run e n t)))\r\n      (failer/run (error \"Unable to bind - not an object.\") n t))))\r\n\r\n(defn with [tier <x]\r\n  (fn [n t]\r\n    (let [prev (l/get-local this)]\r\n      (l/set-local this tier)\r\n      (try (<x n t) (finally (l/set-local this prev))))))\r\n\r\n(defn clause\r\n  ([f] (fn [e] (f (pure e))))\r\n  ([f c] (fn [e] (when (instance? c (dbg/unwrap e)) (f (pure e))))))\r\n\r\n(defn recover [tier catch <x]\r\n  (yield (fn [x]\r\n           (when (instance? Failure x)\r\n             (when-some [<c (catch (.-error ^Failure x))]\r\n               (with tier <c)))) <x))\r\n\r\n(defn variable [^objects frame vars <<x]\r\n  (let [slot (aswap frame frame-slot-last-variable inc)\r\n        position (+ slot (inc (aget frame frame-slot-last-source)))\r\n        ^objects tier (aget ^objects (aget frame frame-slot-tiers) (int position))]\r\n    (aset tier tier-slot-remote slot)\r\n    (aset tier tier-slot-vars (atom @vars))\r\n    (aset ^objects (aget frame frame-slot-variables) (int slot)\r\n      (m/signal!\r\n        (m/cp (try (let [<x (m/?< <<x)]\r\n                     (cond (failure <x) <x\r\n                           (nil? <x)    (Failure. (ex-info \"called `new` on nil\" {}))\r\n                           :else        (m/?< (with tier <x))))\r\n                   (catch #?(:clj Throwable :cljs :default) e\r\n                     (Failure. e))))))))\r\n\r\n(defn source [^objects frame vars]\r\n  (let [slot (aswap frame frame-slot-last-source inc)\r\n        position (+ slot (inc (aget frame frame-slot-last-variable)))]\r\n    (aset ^objects (aget frame frame-slot-sources) (int slot)\r\n      (doto ^objects (aget ^objects (aget frame frame-slot-tiers) (int position))\r\n        (aset tier-slot-vars (atom @vars))))) nil)\r\n\r\n(defn target [^objects frame ctor]\r\n  (aset ^objects (aget frame frame-slot-targets) (int (aswap frame frame-slot-last-target inc)) ctor) nil)\r\n\r\n(defn hook [k v <x]\r\n  (assert (some? v) \"hook value must be non-nil.\")\r\n  (fn [n t]\r\n    (if-some [tier (l/get-local this)]\r\n      (do\r\n        (loop [^objects tier tier]\r\n          (let [^objects f (aget tier tier-slot-parent)]\r\n            (if-some [a (frame-walk-tiers f 1 k identity (aget tier tier-slot-position))]\r\n              (k v a)\r\n              (when-some [^objects tier (aget f frame-slot-parent)]\r\n                (if-some [a (tier-walk-frames tier 1 k identity (aget f frame-slot-position))]\r\n                  (k v a)\r\n                  (if (contains? (aget tier tier-slot-hooks) k)\r\n                    (k v nil) (recur tier)))))))\r\n        (aswap tier tier-slot-hooks assoc k v)\r\n        (<x n #(do (aswap tier tier-slot-hooks dissoc k)\r\n                   (k v) (t))))\r\n      (failer/run (error \"Unable to hook - not an object.\") n t))))\r\n\r\n(def unbound (pure ::unbound))\r\n\r\n(defn subject-at [^objects arr slot]\r\n  (fn [!] (aset arr slot !) #(aset arr slot nil)))\r\n\r\n(defn context-ack [^objects context]\r\n  (let [rpos (aget context context-slot-pending-rpos)\r\n        ^objects buffer (aget context context-slot-pending-buffer)\r\n        ^objects output (aget buffer rpos)]\r\n    (when (= rpos (aget context context-slot-pending-wpos))\r\n      (throw (error \"Unexpected ack.\")))\r\n    (aset context context-slot-pending-rpos\r\n      (bit-and (unchecked-inc rpos)\r\n        (unchecked-dec (alength buffer))))\r\n    (aset buffer rpos nil)\r\n    (loop [output output]\r\n      (when-not (nil? output)\r\n        (aset (aget output output-slot-prev) output-slot-next nil)\r\n        (aset output output-slot-prev nil)\r\n        (aset output output-slot-time nil)\r\n        (let [^objects input (aget output output-slot-input)]\r\n          (when (zero? (aswap input input-slot-pending dec))\r\n            (input-ready input)))\r\n        (recur (aget output output-slot-next))))))\r\n\r\n(defn context-cancel [^objects context]\r\n  (update-event context :cancel identity))\r\n\r\n(defn context-transfer [^objects context]\r\n  (loop []\r\n    (if-some [^objects input (aget context context-slot-check)]\r\n      (do (aset context context-slot-check (aget input input-slot-check))\r\n          (aset input input-slot-check input)\r\n          (input-check input)\r\n          (recur))\r\n      (let [event (aget context context-slot-event)]\r\n        (when (contains? event :cancel)\r\n          ((aget context context-slot-terminator))\r\n          (throw (Cancelled.)))\r\n        (when-not (= {} (:change event))\r\n          (let [^objects buffer (aget context context-slot-pending-buffer)\r\n                size (alength buffer)\r\n                rpos (aget context context-slot-pending-rpos)\r\n                wpos (aget context context-slot-pending-wpos)]\r\n            (when (= rpos (aset context context-slot-pending-wpos\r\n                            (bit-and (unchecked-inc wpos)\r\n                              (unchecked-dec size))))\r\n              (let [larger (object-array (bit-shift-left size 1))\r\n                    split (- size rpos)]\r\n                (acopy buffer rpos larger 0 split)\r\n                (acopy buffer 0 larger split rpos)\r\n                (dotimes [t size]\r\n                  (when-some [output (aget larger t)]\r\n                    (loop [^objects o output]\r\n                      (aset o output-slot-time t)\r\n                      (let [n (aget o output-slot-next)]\r\n                        (when-not (identical? n output)\r\n                          (recur n))))))\r\n                (aset context context-slot-pending-buffer larger)\r\n                (aset context context-slot-pending-wpos size)\r\n                (aset context context-slot-pending-rpos 0)))))\r\n        (aset context context-slot-event nil) event))))\r\n\r\n(defn eval-tree-inst [^objects context inst]\r\n  (case (:op inst)\r\n    :create (let [{[target-frame target-slot] :target\r\n                   [source-frame source-slot] :source} inst]\r\n              ((-> context\r\n                 (aget context-slot-frame-store)\r\n                 ^objects (get target-frame)\r\n                 ^objects (aget frame-slot-targets)\r\n                 (aget target-slot))\r\n               (-> context\r\n                 (aget context-slot-frame-store)\r\n                 ^objects (get source-frame)\r\n                 ^objects (aget frame-slot-sources)\r\n                 (aget source-slot))\r\n               (aswap context context-slot-remote-id dec)))\r\n    :rotate (-> context\r\n              (aget context-slot-frame-store)\r\n              (get (:frame inst))\r\n              (frame-rotate (:position inst)))\r\n    :remove (aswap context context-slot-frame-store dissoc! (:frame inst)))\r\n  context)\r\n\r\n(defn eval-change-inst [^objects context [id slot] value]\r\n  (-> context\r\n    (aget context-slot-frame-store)\r\n    ^objects (get id)\r\n    ^objects (aget frame-slot-inputs)\r\n    ^objects (aget slot)\r\n    (input-change value))\r\n  context)\r\n\r\n(defn eval-freeze-inst [^objects context [id slot]]\r\n  (-> context\r\n    (aget context-slot-frame-store)\r\n    ^objects (get id)\r\n    ^objects (aget frame-slot-inputs)\r\n    ^objects (aget slot)\r\n    (input-freeze))\r\n  context)\r\n\r\n(defn parse-event [^objects context {:keys [acks tree change freeze]}]\r\n  (try (dotimes [_ acks] (context-ack context))\r\n       (reduce eval-tree-inst context tree)\r\n       (when-not (= {} change)\r\n         (update-event context :acks inc)\r\n         (reduce-kv eval-change-inst context change))\r\n       (reduce eval-freeze-inst context freeze)\r\n       (catch #?(:clj Throwable :cljs :default) e (#?(:clj prn :cljs js/console.error) e) (throw e))))\r\n\r\n(defn process-incoming-events [^objects context >incoming]\r\n  (m/sample (partial reduce parse-event context) >incoming))\r\n\r\n(defn write-outgoing-events [write >events]\r\n  (m/ap (let [e (m/?> >events)]\r\n          (when-not (= e empty-event)\r\n            (m/? (write e))))))\r\n\r\n(defn peer [dynamic variable-count source-count constant-count target-count output-count input-count ctor get-used-nodes nm env]\r\n  (fn rec\r\n    ([write ?read] (rec write ?read pst))\r\n    ([write ?read on-error]\r\n     (m/reactor\r\n       (let [^objects context (make-context)]\r\n         (m/stream!\r\n           (write-outgoing-events write\r\n             (m/stream!\r\n               (fn [n t]\r\n                 (aset context context-slot-notifier n)\r\n                 (aset context context-slot-terminator t)\r\n                 (when-some [<main (try (make-frame context nil 0 0 {} [] dynamic\r\n                                          variable-count source-count constant-count target-count output-count input-count\r\n                                          context (atom {}) ctor get-used-nodes nm env)\r\n                                        (catch #?(:clj Throwable :cljs :default) e (prn e) (throw e)))]\r\n                   (try (m/stream! (m/latest (fn [x] (when (instance? Failure x) (on-error (.-error x)))) <main))\r\n                        (catch #?(:clj Throwable :cljs :default) e (prn e) (throw e))))\r\n                 (->It context context-cancel context-transfer)))))\r\n         (m/stream! (process-incoming-events context (m/stream! (m/relieve into (m/sample vector (m/observe ?read)))))))))))\r\n\r\n(defn collapse [s n f & args]\r\n  (->> (iterate pop s)\r\n    (transduce (comp (map peek) (take n)) conj args)\r\n    (apply f)\r\n    (conj (nth (iterate pop s) n))))\r\n\r\n(defn snapshot [env f & args]\r\n  (update env :stack conj (apply f env args)))\r\n\r\n(defn reverse-index [m]\r\n  (reduce-kv (fn [v x i] (assoc v i x))\r\n    (vec (repeat (count m) nil)) m))\r\n\r\n(def empty-frame\r\n  {:variable 0\r\n   :source   0\r\n   :constant 0\r\n   :target   0\r\n   :output   0\r\n   :input    0\r\n   :free     #{}\r\n   :static   {}\r\n   :dynamic  {}})\r\n\r\n;; TODO move me\r\n;; `new` creates a local variable and a remote source\r\n;; `p/fn` creates a local constant and a remote target\r\n;; Same duality with input and output, if there is 3 inputs locally, there is 3 outputs remotely.\r\n;; There is no instruction to create inputs and outputs, they are infered from unquote-splicing.\r\n\r\n(defn sym [& args]\r\n  (symbol (str/join \"-\" args)))\r\n\r\n(defn find-nodes [ir]\r\n  (transduce (distinct)\r\n    (completing (fn [ac nx] (cond-> ac (= ::ir/node (::ir/op nx)) (conj (::ir/slot nx)))))\r\n    [] (ir-utils/->reducible ir)))\r\n\r\n(defn remove-dep-nodes [ir]\r\n  (ir-utils/postwalk ir\r\n    (fn [v] (cond-> v (::ir/deps v) (update ::ir/deps #(filterv (comp not #{::ir/node} ::ir/op) %))))))\r\n\r\n(tests\r\n  (remove-dep-nodes (ir/input [(ir/node 'x) (ir/output ir/nop)])) := (ir/input [(ir/output ir/nop)]))\r\n\r\n(defn tag-sym [sym jvm-hint js-hint]\r\n  #?(:clj (when jvm-hint (vary-meta sym assoc :tag jvm-hint))\r\n     :cljs (when js-hint (vary-meta sym assoc :tag js-hint))))\r\n\r\n(defn compile [prefix inst e]\r\n  (let [nodes (find-nodes inst)\r\n        inst (remove-dep-nodes inst)\r\n        frame (sym prefix 'frame)\r\n        vars (sym prefix 'vars)\r\n        ctor-at (fn [i] (sym prefix 'ctor i))\r\n        expr-at (fn [i] (sym prefix 'expr i))\r\n        restore-free (fn [env free]\r\n                       (reduce-kv (fn [env i f] (assoc env f (list `aget (sym prefix 'env) i))) env free))\r\n        capture-free (fn [env free]\r\n                       `(doto (object-array ~(count free))\r\n                          ~@(eduction (map-indexed (fn [i f] (list `aset i (env f)))) free)))\r\n        emit-exprs (fn [exprs]\r\n                     (list `fn [frame vars (tag-sym (sym prefix 'env) \"[Ljava.lang.Object;\" nil)]\r\n                       (list `let\r\n                         (into [] (comp (map-indexed (fn [i expr] [(expr-at i) expr])) cat) (pop exprs))\r\n                         (peek exprs))))\r\n        update-current (fn [ctors f & args] (conj (pop ctors) (apply f (peek ctors) args)))\r\n        from-last-expr (fn [exprs f & args] (conj exprs (apply f (expr-at (dec (count exprs))) args)))\r\n        add-many (fn [ctors env args]\r\n                   (reduce\r\n                     (fn [[ctors args] arg]\r\n                       (let [ctors (arg ctors env)]\r\n                         [ctors (conj args (expr-at (dec (count (peek ctors)))))]))\r\n                     [ctors []] args))]\r\n    (-> ((fn walk [env off idx dyn inst]\r\n           (case (::ir/op inst)\r\n             ::ir/nop (update env :stack conj (fn [ctors _env] (update-current ctors conj nil)))\r\n             ::ir/sub (let [p (- idx (::ir/index inst))]\r\n                        (if (< p off)\r\n                          (let [f (:static env)\r\n                                i (f p (count f))]\r\n                            (-> env\r\n                              (update :free conj p)\r\n                              (assoc :static (assoc f p i))\r\n                              (update :stack conj (fn [ctors _env]\r\n                                                    (update-current ctors conj `(static ~frame ~i))))))\r\n                          (update env :stack conj (fn [ctors env] (update-current ctors conj (env p))))))\r\n             ::ir/pub (-> env\r\n                        (walk off idx dyn (::ir/init inst))\r\n                        (walk off (inc idx) dyn (::ir/inst inst))\r\n                        (update :stack collapse 2 (fn [form cont idx]\r\n                                                    (fn [ctors env]\r\n                                                      (let [ctors (form ctors env)]\r\n                                                        (-> ctors\r\n                                                          (update-current from-last-expr (fn [x] `(signal ~x)))\r\n                                                          (cont (assoc env idx (expr-at (count (peek ctors)))))))))\r\n                          idx))\r\n             ::ir/do  (let [deps (::ir/deps inst)]\r\n                        (-> (reduce (fn [env arg] (walk env off idx dyn arg)) env deps)\r\n                          (update :stack collapse (count deps) vector)\r\n                          (walk off idx dyn (::ir/inst inst))\r\n                          (update :stack collapse 2 (fn [deps form]\r\n                                                      (fn [ctors env]\r\n                                                        (let [[ctors deps] (add-many ctors env deps)]\r\n                                                          (-> ctors\r\n                                                            (update-current conj `(make-input ~frame ~deps))\r\n                                                            (form env))))))))\r\n             ::ir/def (let [symb (::ir/slot inst)]\r\n                        (-> env\r\n                          (update :stack conj (fn [ctors _env]\r\n                                                (update-current ctors conj `(pure (inject '~symb)))))))\r\n             ::ir/lift (-> env\r\n                         (walk off idx dyn (::ir/init inst))\r\n                         (update :stack collapse 1 (fn [f]\r\n                                                     (fn [ctors env]\r\n                                                       (-> ctors\r\n                                                         (f env)\r\n                                                         (update-current from-last-expr (fn [x] `(pure ~x))))))))\r\n             ::ir/eval (update env :stack conj (fn [ctors _env]\r\n                                                 (update-current ctors conj `(pure ~(::ir/form inst)))))\r\n             ::ir/node (let [symb (::ir/slot inst)]\r\n                         (if (dyn symb)\r\n                           (update env :stack conj (fn [ctors _env]\r\n                                                     (update-current ctors conj `(get (deref ~vars) '~symb))))\r\n                           (let [d (:dynamic env)\r\n                                 i (d symb (count d))]\r\n                             (-> env\r\n                               (assoc :dynamic (assoc d symb i))\r\n                               (update :stack conj\r\n                                 (fn [ctors _env]\r\n                                   (update-current ctors conj\r\n                                     `(dynamic ~frame '~symb '~(assoc (select-debug-info inst)\r\n                                                                 ::dbg/sym symb, ::dbg/slot i)))))))))\r\n             ::ir/bind (let [v (::ir/slot inst)]\r\n                         (-> env\r\n                           (walk off idx (conj dyn v) (::ir/inst inst))\r\n                           (update :stack collapse 1\r\n                             (fn [form symb idx]\r\n                               (fn [ctors env]\r\n                                 (-> ctors\r\n                                   (update-current conj `(get (deref ~vars) '~symb) `(swap! ~vars assoc '~symb ~(env idx)))\r\n                                   (form env)\r\n                                   (update-current conj `(swap! ~vars assoc '~symb ~(expr-at (count (peek ctors)))))\r\n                                   (update-current (fn [exprs] (conj exprs (expr-at (- (count exprs) 2))))))))\r\n                             v (- idx (::ir/index inst)))))\r\n             ::ir/apply (let [f          (::ir/fn inst)\r\n                              args       (::ir/args inst)\r\n                              debug-info (select-debug-info (loop [f f]\r\n                                                              (case (::ir/op f)\r\n                                                                ::ir/global (assoc f ::dbg/type :apply, ::dbg/name (symbol (::ir/name f)))\r\n                                                                ::ir/node   (assoc f ::dbg/type :apply)\r\n                                                                ::ir/eval   (cond-> (assoc f ::dbg/type :eval)\r\n                                                                              (not (::dbg/fn f)) (assoc ::dbg/fn (::ir/form f)))\r\n                                                                ::ir/sub    (assoc f ::dbg/type :apply)\r\n                                                                ::ir/input  (assoc f ::dbg/type :apply)\r\n                                                                ::ir/apply  (recur (::ir/fn f))\r\n                                                                {::dbg/type :unknown-apply, :op f})))]\r\n                          (if (and (= (ir/eval '{}) f) (= 2 (count args)))\r\n                            (-> (reduce (fn [env inst] (walk env off idx dyn inst)) env args)\r\n                              (update :stack collapse 2\r\n                                (fn [a b]\r\n                                  (fn [ctors env]\r\n                                    (let [[ctors [a b]] (add-many ctors env [a b])]\r\n                                      (update-current ctors conj `(causal '~debug-info ~a ~b)))))))\r\n                            (-> (reduce (fn [env inst] (walk env off idx dyn inst)) env (cons f args))\r\n                              (update :stack collapse (inc (count args))\r\n                                (fn [& forms]\r\n                                  (fn [ctors env]\r\n                                    (let [[ctors forms] (add-many ctors env forms)]\r\n                                      (update-current ctors conj `(latest-apply '~debug-info ~@forms)))))))))\r\n             ::ir/input (let [deps (::ir/deps inst)]\r\n                          (-> (reduce (fn [env arg] (walk env off idx dyn arg)) env deps)\r\n                            (update :stack collapse (count deps) vector)\r\n                            (update :input inc)\r\n                            (update :stack collapse 1\r\n                              (fn [deps]\r\n                                (fn [ctors env]\r\n                                  (let [[ctors deps] (add-many ctors env deps)]\r\n                                    (update-current ctors conj `(input-spawn ~frame ~deps))))))))\r\n             ::ir/output (-> env\r\n                           (walk off idx dyn (::ir/init inst))\r\n                           (update :output inc)\r\n                           (update :stack collapse 1\r\n                             (fn [form]\r\n                               (fn [ctors env]\r\n                                 (-> ctors\r\n                                   (form env)\r\n                                   (update-current from-last-expr\r\n                                     (fn [x] `(make-output ~frame (check-failure '~(select-debug-info inst) ~x)))))))))\r\n             ::ir/variable (-> env\r\n                             (walk off idx dyn (::ir/init inst))\r\n                             (update :variable inc)\r\n                             (update :stack collapse 1\r\n                               (fn [form]\r\n                                 (fn [ctors env]\r\n                                   (-> ctors\r\n                                     (form env)\r\n                                     (update-current from-last-expr (fn [x] (list `variable frame vars x))))))))\r\n             ::ir/source (-> env\r\n                           (update :source inc)\r\n                           (update :stack conj (fn [ctors _env]\r\n                                                 (update-current ctors conj (list `source frame vars)))))\r\n             ::ir/constant (-> env\r\n                             (merge empty-frame)\r\n                             (walk idx idx #{} (::ir/init inst))\r\n                             (snapshot (comp vec :free))\r\n                             (snapshot (comp reverse-index :static))\r\n                             (snapshot (comp reverse-index :dynamic))\r\n                             (snapshot :variable)\r\n                             (snapshot :source)\r\n                             (snapshot :constant)\r\n                             (snapshot :target)\r\n                             (snapshot :output)\r\n                             (snapshot :input)\r\n                             (update :free (partial into (:free env) (filter #(< % off))))\r\n                             (merge (select-keys env (keys (dissoc empty-frame :free))))\r\n                             (update :constant inc)\r\n                             (update :stack collapse 10\r\n                               (fn [form free static dynamic variable-count source-count constant-count target-count output-count input-count]\r\n                                 (fn [ctors env]\r\n                                   (let [exprs (peek ctors)\r\n                                         ctors (-> (pop ctors)\r\n                                                 (conj [])\r\n                                                 (form (restore-free env free)))]\r\n                                     (-> ctors\r\n                                       (update-current from-last-expr\r\n                                         (fn [x] `(check-failure '~(select-debug-info inst) ~x)))\r\n                                       (update-current\r\n                                         (fn [exprs]\r\n                                           (list `constructor (list 'quote dynamic)\r\n                                             variable-count source-count\r\n                                             constant-count target-count\r\n                                             output-count input-count\r\n                                             (emit-exprs exprs))))\r\n                                       (conj exprs)\r\n                                       (update-current conj\r\n                                         (list `constant frame\r\n                                           (list (ctor-at (dec (count ctors)))\r\n                                             (capture-free env free) (mapv env static))))))))))\r\n             ::ir/target (let [deps (::ir/deps inst)]\r\n                           (-> (reduce (fn [env inst] (walk env idx idx #{} inst))\r\n                                 (merge env empty-frame) deps)\r\n                             (update :stack collapse (count deps) vector)\r\n                             (snapshot (comp vec :free))\r\n                             (snapshot (comp reverse-index :static))\r\n                             (snapshot (comp reverse-index :dynamic))\r\n                             (snapshot :variable)\r\n                             (snapshot :source)\r\n                             (snapshot :constant)\r\n                             (snapshot :target)\r\n                             (snapshot :output)\r\n                             (snapshot :input)\r\n                             (update :free (partial into (:free env) (filter #(< % off))))\r\n                             (merge (select-keys env (keys (dissoc empty-frame :free))))\r\n                             (update :target inc)\r\n                             (update :stack collapse 10\r\n                               (fn [deps free static dynamic variable-count source-count constant-count target-count output-count input-count]\r\n                                 (fn [ctors env]\r\n                                   (let [exprs (peek ctors)\r\n                                         [ctors deps] (-> (pop ctors)\r\n                                                        (conj [])\r\n                                                        (add-many (restore-free env free) deps))]\r\n                                     (-> ctors\r\n                                       (update-current conj `(make-input ~frame ~deps))\r\n                                       (update-current\r\n                                         (fn [exprs]\r\n                                           (list `constructor (list 'quote dynamic)\r\n                                             variable-count source-count\r\n                                             constant-count target-count\r\n                                             output-count input-count\r\n                                             (emit-exprs exprs))))\r\n                                       (conj exprs)\r\n                                       (update-current conj\r\n                                         (list `target frame\r\n                                           (list (ctor-at (dec (count ctors)))\r\n                                             (capture-free env free) (mapv env static)))))))))))\r\n             (throw (ex-info (str \"unknown instruction: \" inst) {:inst inst}))))\r\n         empty-frame 0 0 #{} inst)\r\n      (snapshot (comp reverse-index :dynamic))\r\n      (snapshot :variable)\r\n      (snapshot :source)\r\n      (snapshot :constant)\r\n      (snapshot :target)\r\n      (snapshot :output)\r\n      (snapshot :input)\r\n      (:stack)\r\n      (collapse 8\r\n        (fn [form dynamic nvariable nsource nconstant ntarget noutput ninput]\r\n          (let [code (let [ctors (form [[]] {})]\r\n                       (list `let (into [] (comp (map-indexed (fn [i ctor] [(ctor-at i) ctor])) cat) (pop ctors))\r\n                         (emit-exprs (peek ctors))))]\r\n            (when (::lang/pprint-source e)\r\n              (println \"---\" (::lang/sym e) \"SOURCE ---\")\r\n              (pp/pprint code))\r\n            {:fn code, :dynamic `'~dynamic, :nvariable nvariable :nsource nsource, :get-used-nodes `(fn [] ~nodes)\r\n             :nconstant nconstant, :ntarget ntarget, :noutput noutput, :ninput ninput})))\r\n      (peek))))\r\n\r\n(defn- get-used-nodes-recursively [info]\r\n  (loop [walked #{}, unwalked (seq [info])]\r\n    (if-some [[to-walk & unwalked] unwalked]\r\n      (if (map? to-walk)                ; skip unbound nodes\r\n        (if (walked to-walk)\r\n          (recur walked unwalked)\r\n          (recur (conj walked to-walk) (into unwalked ((:get-used-nodes to-walk)))))\r\n        (recur walked unwalked))\r\n      walked)))\r\n\r\n(defn main [info]\r\n  (let [info (cond-> info (var? info) deref)\r\n        all-nodes (get-used-nodes-recursively info)\r\n        {:keys [nvariable nsource nconstant ntarget noutput ninput]}\r\n        (apply merge-with +\r\n          (eduction (map #(select-keys % [:nvariable :nsource :nconstant :ntarget :noutput :ninput]))\r\n            all-nodes))]\r\n    (peer (:dynamic info) nvariable nsource nconstant ntarget noutput ninput (:fn info) (:get-used-nodes info) (:var-name info) nil)))\r\n\r\n;; used indirectly in compiler `analyze-case`\r\n(defn case-default-throw [v] (throw (new #?(:clj IllegalArgumentException :cljs js/Error) (str \"No matching clause: \" v))))\r\n(defn pick-case-branch [picker-map v default-branch & branches]\r\n  (if-some [i (picker-map v)] (nth branches i) default-branch))\r\n"],"x_google_ignoreList":[0]}