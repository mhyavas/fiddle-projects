{"version":3,"sources":["hyperfiddle/electric/impl/array_fields.cljc"],"mappings":"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","names":["var_args","G__45557","hyperfiddle.electric.impl.array-fields/swap","args-arr__5747__auto__","len__5722__auto__","i__5723__auto__","argseq__5748__auto__","cljs.core/IndexedSeq","seq45550","G__45551","cljs.core/first","cljs.core/next","G__45552","G__45553","G__45554","G__45555","G__45556","self__5707__auto__","a","k","f","G__45563","x","G__45565","G__45566","y","G__45568","G__45569","G__45570","z","G__45573","G__45574","G__45575","G__45576","more","cljs.core.apply","hyperfiddle.electric.impl.array-fields/get","hyperfiddle.electric.impl.array-fields/getset","v","ret","hyperfiddle.electric.impl.array-fields/getswap","hyperfiddle.electric.impl.array_fields.swap","this__5283__auto__","writer__5284__auto__","opt__5285__auto__","cljs.core/-write","hyperfiddle.electric.impl.array-fields/P","hyperfiddle.electric.impl.array-fields/->P","state-"],"sourcesContent":["(ns hyperfiddle.electric.impl.array-fields\r\n  (:refer-clojure :exclude [get set])\r\n  #?(:cljs (:require-macros hyperfiddle.electric.impl.array-fields))\r\n  (:require [hyperfiddle.rcf :as rcf :refer [tests]]))\r\n;; #?(:clj (set! *warn-on-reflection* true))\r\n(defmacro deffields [& fields]\r\n  `(do ~@(for [[fld idx] (mapv vector fields (range))]\r\n           `(def ~fld (int ~idx)))))\r\n(defn swap\r\n  ([^objects a k f] (aset a k (f (aget a k))))\r\n  ([^objects a k f x] (aset a k (f (aget a k) x)))\r\n  ([^objects a k f x y] (aset a k (f (aget a k) x y)))\r\n  ([^objects a k f x y z] (aset a k (f (aget a k) x y z)))\r\n  ([^objects a k f x y z & more] (aset a k (apply f (aget a k) x y z more))))\r\n(defmacro fswap [O k f & args] `(swap (.-state- ~O) ~k ~f ~@args))\r\n(defn get [^objects a k] (aget a k))\r\n(defmacro fget [O k] `(get (.-state- ~O) ~k))\r\n(defmacro set [arr & kvs]\r\n  (let [ar (with-meta (gensym \"arr\") {:tag 'objects})]\r\n    `(let [~ar ~arr]\r\n       ~@(for [[k v] (partition 2 kvs)]\r\n           ;; FIXME better way to fix reflection warning than call `identity`?\r\n           `(aset ~ar ~k (identity ~v))))))\r\n(defmacro fset [O & kvs] `(set (.-state- ~O) ~@kvs))\r\n(defn getset [^objects a k v] (let [ret (aget a k)] (aset a k v) ret))\r\n(defmacro fgetset [O k v] `(getset (.-state- ~O) ~k ~v))\r\n(defn getswap [^objects a k f] (let [ret (aget a k)] (swap a k f) ret))\r\n\r\n;;; TESTS ;;;\r\n(deftype P [state-])\r\n(tests\r\n  (deffields x y)\r\n  (def aP (->P (object-array 2)))\r\n  (let [^P aP aP]\r\n    (fset aP x 1 y 2)            := 2\r\n    [(fget aP x) (fget aP y)]    := [1 2]\r\n    (fswap aP x inc)             := 2\r\n    (swap (.-state- aP) x inc)   := 3\r\n    (fgetset aP x 0)             := 3\r\n    (getset (.-state- aP) x 100) := 0\r\n    (fget aP x)                  := 100\r\n    (getswap (.-state- aP) x inc) := 100\r\n    (fget aP x)                   := 101\r\n    ))\r\n"],"x_google_ignoreList":[0]}