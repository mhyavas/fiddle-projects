{"version":3,"sources":["hyperfiddle/electric/debug.cljc"],"mappings":"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","names":["hyperfiddle.electric.debug/->id","cljs.core/random-uuid","js/hyperfiddle","js/hyperfiddle.electric","js/hyperfiddle.electric.debug","js/hyperfiddle.electric.debug.PEER-ID","hyperfiddle.electric.debug/PEER-ID","var_args","G__45722","hyperfiddle.electric.debug/ex-info*","js/Error","message","data","hyperfiddle.electric.debug.ex_info_STAR_","cause","id","js/hyperfiddle.electric.FailureInfo","cljs.core.assoc","hyperfiddle.electric.debug/ex-id","ex","hyperfiddle.electric.debug/add-stack-frame","frame","cljs.core/ex-message","cljs.core.update","cljs.core/ex-data","cljs.core/conj","or__4998__auto__","cljs.core/ex-cause","hyperfiddle.electric.debug/concat-stacks","ex1","ex2","cljs.core/into","G__45740","hyperfiddle.electric.debug/error","debug-info","failure","hyperfiddle.electric.debug.error","context","err","js/hyperfiddle.electric.Pending","js/missionary.Cancelled","js/hyperfiddle.electric.Failure","G__45748","hyperfiddle.electric.debug/render-arg","arg","cljs.core/ident?","cljs.core.symbol","*print-level*-orig-val__45753","*print-length*-orig-val__45754","*print-level*-temp-val__45755","*print-length*-temp-val__45756","cljs.core/*print-level*","cljs.core/*print-length*","cljs.core.pr_str","hyperfiddle.electric.debug/serializable-frame","cljs.core.partial","cljs.core/mapv","hyperfiddle.electric.debug/serializable","map","cljs.core/contains?","hyperfiddle.electric.debug/normalize-frame","meta","dbg-in-meta","contrib.data/select-ns","cljs.core.merge","cljs.core.dissoc","hyperfiddle.electric.debug/expand-frame","map__45765","cljs.core/--destructure-map","cljs.core.get","type","name","args","G__45766","cljs.core/Keyword","G__45768","hyperfiddle.electric.debug/frames","G__45772","cljs.core.remove","cljs.core._EQ_","cljs.core.filter","cljs.core.map","cljs.core.mapcat","hyperfiddle.electric.debug/locate","map__45781","origin","G__45782","cljs.core.not_EQ_","cljs.core/not","fexpr__45783","hyperfiddle.electric.debug/fail?","hyperfiddle.electric.debug/render-frame","map__45784","remote","file","line","macro","scope","params","G__45785","clojure.string.join","G__45786","cljs.core.sequence","cljs.core/seq","cljs.core.concat","cljs.core/List","cljs.core/vec","G__45790","cljs.core/unquote","cljs.core/first","G__45792","map__45794","action","target","method","G__45797","cljs.core/rest","f","cljs.core/name","cljs.core/nil?","hyperfiddle.electric.debug/render-stack-trace","hyperfiddle.electric.debug/stack-trace","hyperfiddle.electric.debug/unwrap","exception"],"sourcesContent":["(ns hyperfiddle.electric.debug\r\n  (:require #_[hyperfiddle.electric.impl.runtime :as-alias r]\r\n            [clojure.string :as str]\r\n            [contrib.data :as data]\r\n            [hyperfiddle.electric.impl.ir :as-alias ir]\r\n            [hyperfiddle.rcf :as rcf :refer [tests]])\r\n  (:import (hyperfiddle.electric Failure Pending)\r\n           (missionary Cancelled)\r\n           #?(:clj (clojure.lang ExceptionInfo))\r\n           (hyperfiddle.electric FailureInfo)))\r\n\r\n(defn ->id []\r\n  #?(:clj  (java.util.UUID/randomUUID)\r\n     :cljs (random-uuid)))\r\n\r\n(defonce ^{:doc \"A random unique ID generated for each Electric runtime instance (browser tab, jvm). Used to identify origin of a transfered value.\"}\r\n  PEER-ID\r\n  ;; UUID v4 collision probability assumed insignificant for this use case\r\n  (->id))\r\n\r\n(defn ex-info*\r\n  ([message data] (ex-info* message data nil))\r\n  ([message data cause] (ex-info* message data (str (->id)) cause))\r\n  ([message data id cause] (FailureInfo. message (assoc data :hyperfiddle.electric/type ::trace) id cause)))\r\n\r\n(tests \"2 traces with equal values are =\"\r\n  (let [cause #?(:clj (Throwable.) :cljs (js/Error.))]\r\n    (ex-info* \"\" {} cause) := (ex-info* \"\" {} cause)\r\n    nil))\r\n\r\n(defn ex-id [ex] (.-id ^FailureInfo ex))\r\n\r\n(defn add-stack-frame [frame ex]\r\n  (let [frame (assoc frame ::origin PEER-ID)]\r\n   (if (instance? FailureInfo ex)\r\n    (ex-info* (ex-message ex) (update (ex-data ex) ::trace conj frame) (ex-id ex) (or (ex-cause ex) ex))\r\n    (ex-info* (ex-message ex) {::trace [frame]} ex))))\r\n\r\n(defn concat-stacks [ex1 ex2]\r\n  (assert (instance? FailureInfo ex1))\r\n  (assert (instance? FailureInfo ex2))\r\n  (ex-info* (ex-message ex1) (update (ex-data ex1) ::trace into (::trace (ex-data ex2))) (or (ex-cause ex1) (ex-cause ex2) ex2)))\r\n\r\n(defn error\r\n  ([debug-info ^Failure failure]\r\n   (error debug-info failure nil))\r\n  ([debug-info ^Failure failure ^FailureInfo context]\r\n   (let [err (.-error failure)]\r\n     (if (or (instance? Pending err) (instance? Cancelled err))\r\n       failure\r\n       (Failure. (cond-> (add-stack-frame debug-info err)\r\n                   (some? context) (concat-stacks context)))))))\r\n\r\n(tests \"rewrapping keeps same ID\"\r\n  (def ex (ex-info* \"x\" {}))\r\n  (ex-id ex) := (ex-id (add-stack-frame {} ex)))\r\n\r\n(defn render-arg [arg]\r\n  (cond\r\n    (string? arg) arg\r\n    (ident? arg)  arg\r\n\r\n    (or (instance? hyperfiddle.electric.Failure arg)\r\n      #?(:clj (instance? Throwable arg)\r\n         :cljs (instance? js/Error arg)))\r\n    (symbol \"<exception>\")\r\n\r\n    :else\r\n    (binding [*print-level*  1\r\n              *print-length* 4]\r\n      (pr-str arg))))\r\n\r\n(defn serializable-frame [frame]\r\n  (if (::serializable frame)\r\n    frame\r\n    (-> (update frame ::args (partial mapv render-arg))\r\n        (assoc ::serializable true))))\r\n\r\n(defn serializable [map]\r\n  (if (contains? map ::trace)\r\n    (update map ::trace (partial mapv serializable-frame))\r\n    map))\r\n\r\n(defn normalize-frame [frame]\r\n  (let [meta        (::meta frame)\r\n        dbg-in-meta (data/select-ns :hyperfiddle.electric.debug (::meta frame))]\r\n    (merge frame dbg-in-meta {::meta (dissoc meta dbg-in-meta)})))\r\n\r\n(declare frames)\r\n\r\n(defn expand-frame\r\n  \"Turn a stack frame into a sequence of lines to report\"\r\n  [frame]\r\n  (let [{::keys [type name args]} frame]\r\n    (case type\r\n      :apply (case name\r\n               ;; hyperfiddle.electric.impl.runtime/fail (concat (frames (second args)) [frame])\r\n               [frame])\r\n      [frame])))\r\n\r\n(defn frames [err]\r\n  (some->> (::trace (ex-data err))\r\n           (remove (fn [frame] (= {} (::fn frame)))) ; (do a b) => ({} a b)\r\n           (filter ::type)\r\n           (map normalize-frame)\r\n           (mapcat expand-frame)))\r\n\r\n(defn locate [frame]\r\n  (let [{::keys [origin type meta] :as frame} (normalize-frame frame)]\r\n    (cond-> frame\r\n      (and (not= PEER-ID origin)\r\n           (not (#{:transfer :toggle} type))) (assoc ::remote true)\r\n      (:line meta) (assoc ::line (:line meta))\r\n      (:file meta) (assoc ::file (:file meta)))))\r\n\r\n(def fail? '#{hyperfiddle.electric.impl.runtime/fail})\r\n\r\n(defn render-frame [frame]\r\n  (let [{::keys [remote file line macro scope type name params args meta]} frame]\r\n    (->> [\"in\"\r\n          (when remote \"remote\")\r\n          (when macro \"macro\")\r\n          (case scope\r\n            :lexical \"lexically bound\"\r\n            :dynamic \"dynamically bound\"\r\n            nil)\r\n\r\n          (str/join \" \"\r\n            (case type\r\n              :apply (if (fail? name)\r\n                       [\"(throw\" ~(render-arg (first args)) \")\"]\r\n                       `[\"(\" ~name ~@(map render-arg args) \")\"])\r\n              :eval  (if (fail? (::fn frame))\r\n                       `[\"(throw\" ~(render-arg (first args)) \")\"]\r\n                       (let [{::keys [action target method args]} frame]\r\n                         (case action\r\n                           :field-access [\"(\" (str \".-\" method) target \")\"]\r\n                           :static-call  `[\"(\" ~(str target \"/\" method) ~@(map render-arg (rest args)) \")\"]\r\n                           :call         `[\"(\" ~(str \".\" method) ~target ~@(map render-arg (rest args))\")\"]\r\n                           :fn-call      (if (some? name)\r\n                                           `[\"(\" (clojure.core/fn ~name [~@params] ~'...) ~@(map render-arg args) \")\"]\r\n                                           `[\"(\" (clojure.core/fn [~@params] ~'...) ~@(map render-arg args) \")\"])\r\n                           #_else (let [f (or (::fn frame) (::ir/form frame) \"<unknown>\")]\r\n                                    `[\"(\" ~f ~@(map render-arg args) \")\"]))))\r\n              :reactive-fn   [\"reactive\" (if (some? name)\r\n                                           `(~'fn ~name ~args ~'...)\r\n                                           `(~'fn ~args ~'...))]\r\n              :reactive-defn [\"reactive\" `(~'defn ~name ~args ~'...)]\r\n              :try           [\"(try ...)\" ]\r\n              :catch         [`(~'catch ~@args ~'...)]\r\n              :finally       [\"(finally ...)\"]\r\n              :case-clause   [`(~'case ~@args ~'...)]\r\n              :case-default  [\"case default branch\"]\r\n              :transfer      [\"transfer to\" (clojure.core/name name)]\r\n              :toggle        [\"transfer\"]\r\n              `[\"<unknow frame>\" ~(::ir/op frame)]\r\n              ))\r\n\r\n          (when file (str \"in \" file))\r\n          (when line (str \"line \" line))\r\n          ]\r\n      (remove nil?)\r\n      (str/join \" \"))))\r\n\r\n(defn render-stack-trace [err]\r\n  (->> (frames err)\r\n       (map locate)\r\n       (map render-frame)\r\n       (str/join \"\\n\")))\r\n\r\n(defn stack-trace [err] (render-stack-trace err))\r\n\r\n(defn unwrap [exception]\r\n  (if (= ::trace (:hyperfiddle.electric/type (ex-data exception)))\r\n    (ex-cause exception)\r\n    exception))\r\n"],"x_google_ignoreList":[0]}