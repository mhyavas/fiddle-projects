{"version":3,"sources":["hyperfiddle/electric/impl/gather.cljc"],"mappings":"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","names":["hyperfiddle.electric.impl.gather/done!","main","terminator","hyperfiddle.electric.impl.gather/cancel!","temp__5820__auto__","item","n","fexpr__47466","fexpr__47467","hyperfiddle.electric.impl.gather/flush!","next","a__8024__auto__","i__8025__auto__","x__8026__auto__","cljs.core/deref","e47471","_","hyperfiddle.electric.impl.gather/fail!","error","hyperfiddle.electric.impl.gather/sample!","rf","notifier","idle","head","r","e47489","e","e47491","G__47492","G__47493","unused__18786__auto__","self__","G__47499","js/Error","args47497","cljs.core/aclone","this__5283__auto__","writer__5284__auto__","opt__5285__auto__","cljs.core/-write","hyperfiddle.electric.impl.gather/It","hyperfiddle.electric.impl.gather/->It","it","hyperfiddle.electric.impl.gather/transfer!","cljs.core/not","temp__5818__auto__","prev","cljs.core.object_array","e47505","curr","fexpr__47506","t","e47507","fexpr__47508","hyperfiddle.electric.impl.failer/run","fexpr__47512","e47504","hyperfiddle.electric.impl.gather/gather",">>x","G__47513","G__47514","G__47515"],"sourcesContent":["(ns hyperfiddle.electric.impl.gather\r\n  (:require [hyperfiddle.electric.impl.failer :as failer])\r\n  #?(:clj (:import (clojure.lang IDeref IFn)))\r\n  #?(:cljs (:require-macros [hyperfiddle.electric.impl.gather :refer [aget-aset]])))\r\n\r\n#?(:clj\r\n   (defmacro aget-aset [arr idx val]\r\n     `(let [a# ~arr\r\n            i# ~idx\r\n            x# (aget a# i#)]\r\n        (aset a# i# ~val) x#)))\r\n\r\n;; 0: iterator\r\n;; 1: prev in linked list\r\n;; 2: next in linked list\r\n;; 3: next in transfer stack\r\n;; 4: true if input is ready\r\n;; 5: true if output can be notified\r\n;; 6: count of non-terminated flows\r\n\r\n(defn ^:static done! [^objects main terminator]\r\n  (when (zero? (aset main (int 6) (dec (aget main (int 6))))) (terminator)))\r\n\r\n(defn ^:static cancel! [^objects main]\r\n  (when-some [item (aget main (int 2))]\r\n    (loop [^objects item item]\r\n      (when-not (identical? item main)\r\n        (let [n (aget item (int 2))]\r\n          (aset item (int 1) nil)\r\n          (aset item (int 2) nil)\r\n          ((aget item (int 0)))\r\n          (recur n))))\r\n    (aset main (int 1) nil)\r\n    (aset main (int 2) nil)\r\n    ((aget main (int 0)))))\r\n\r\n(defn ^:static flush! [item]\r\n  (loop [^objects item item]\r\n    (when (some? item)\r\n      (let [next (aget-aset item (int 3) nil)]\r\n        (try @(aget item (int 0))\r\n             (catch #?(:clj Throwable :cljs :default) _))\r\n        (recur next)))))\r\n\r\n(defn ^:static fail! [^objects main ^objects item error]\r\n  (cancel! main)\r\n  (flush! (aget-aset main (int 3) nil))\r\n  (flush! item)\r\n  (throw error))\r\n\r\n(defn ^:static sample! [^objects main rf notifier]\r\n  (let [^boolean idle (aget-aset main (int 5) false)\r\n        ^objects head (aget-aset main (int 3) nil)]\r\n    (loop [^objects item (aget-aset head (int 3) nil)\r\n           r (try @(aget head (int 0))\r\n                  (catch #?(:clj Throwable :cljs :default) e\r\n                    (fail! main item e)))]\r\n      (if (nil? item)\r\n        (do (if (aget main (int 5))\r\n              (when idle (notifier))\r\n              (aset main (int 5) ^Object idle)\r\n              ;; ^ Reflection optimization: no static method RT.aset\r\n              ;; for (^objects ^int ^boolean), target (^objects ^int ^object)\r\n              ;; instead.\r\n              )\r\n            r)\r\n        (let [next (aget-aset item (int 3) nil)]\r\n          (recur next\r\n            (try (rf r @(aget item (int 0)))\r\n                 (catch #?(:clj Throwable :cljs :default) e\r\n                   (fail! main next e)))))))))\r\n\r\n(deftype It [main rf notifier terminator]\r\n  IFn\r\n  (#?(:clj invoke :cljs -invoke) [it]\r\n    (locking it (cancel! main)))\r\n  IDeref\r\n  (#?(:clj deref :cljs -deref) [it]\r\n    (locking it (sample! main rf notifier))))\r\n\r\n(defn ^:static transfer! [^It it]\r\n  (let [^objects main (.-main it)]\r\n    (while (aset main (int 4) (not (aget main (int 4))))\r\n      (if-some [^objects prev (aget main (int 1))]\r\n        (let [item (object-array (int 4))\r\n              ^boolean idle (aget-aset main (int 5) false)]\r\n          (aset main (int 6) (inc (aget main (int 6))))\r\n          (aset item (int 1) prev)\r\n          (aset prev (int 2) item)\r\n          (aset main (int 1) item)\r\n          (aset item (int 2) main)\r\n          (let [n #(locking it\r\n                     (if (nil? (aget item (int 1)))\r\n                       (try @(aget item (int 0))\r\n                            (catch #?(:clj Throwable\r\n                                      :cljs :default) _))\r\n                       (if-some [^objects curr (aget-aset main (int 3) item)]\r\n                         (aset item (int 3) curr)\r\n                         (if (aget main (int 5))\r\n                           ((.-notifier it))\r\n                           (aset main (int 5) true)))))\r\n                t #(locking it\r\n                     (when-some [^objects prev (aget item (int 1))]\r\n                       (let [^objects next (aget item (int 2))]\r\n                         (aset next (int 1) prev)\r\n                         (aset prev (int 2) next)\r\n                         (aset item (int 1) nil)\r\n                         (aset item (int 2) nil)))\r\n                     (done! main (.-terminator it)))]\r\n            (aset item (int 0)\r\n              (try (@(aget main (int 0)) n t)\r\n                   (catch #?(:clj Throwable :cljs :default) e\r\n                     (failer/run e n t))))\r\n            (if (aget main (int 5))\r\n              (when idle ((.-notifier it)))\r\n              (aset main (int 5) idle))))\r\n        (try @(aget main (int 0))\r\n             (catch #?(:clj Throwable\r\n                       :cljs :default) _))))))\r\n\r\n(defn gather \"\r\nGiven a commutative function and a flow of flows, returns a flow concurrently running the flow with flows produced by\r\nthis flow and producing values produced by nested flows, reduced by the function if more than one can be transferred\r\nsimultaneously.\r\n\" [rf >>x]\r\n  (fn [n t]\r\n    (let [main (object-array (int 7))\r\n          it (->It main rf n t)]\r\n      (doto main\r\n        (aset (int 1) main)\r\n        (aset (int 2) main)\r\n        (aset (int 4) true)\r\n        (aset (int 5) true)\r\n        (aset (int 6) 1))\r\n      (locking it\r\n        (aset main (int 0)\r\n          (>>x #(locking it (transfer! it))\r\n            #(locking it (done! main t))))\r\n        (transfer! it) it))))\r\n\r\n(comment\r\n  (require '[missionary.core :as m])\r\n  (def !xs (repeatedly 5 #(atom 0)))\r\n  (def it ((gather + (m/seed (map m/watch !xs)))\r\n           #(prn :ready) #(prn :done)))\r\n  @it\r\n  (swap! (nth !xs 1) inc)\r\n  (it)\r\n\r\n  (def failer (m/ap (throw (ex-info \"error\" {}))))\r\n\r\n  (def it ((gather + (m/seed [(m/watch (nth !xs 0))\r\n                              failer\r\n                              (m/watch (nth !xs 1))\r\n                              (m/observe (fn [!] (def e! !) #(prn :cancelled)))]))\r\n           #(prn :ready) #(prn :done)))\r\n  @it\r\n\r\n  (def it ((gather + failer) #(prn :ready) #(prn :done)))\r\n  @it\r\n\r\n  )\r\n"],"x_google_ignoreList":[0]}