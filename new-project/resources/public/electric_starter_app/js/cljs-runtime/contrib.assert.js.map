{"version":3,"sources":["contrib/assert.cljc"],"mappings":";AAIA,6BAAA,7BAAOA,kEAAQC,UAAUC,OAAOC,EAAEC;AAAlC,AACE,IAAMC,MAAI,CAAA,0IAAA,yHAAA,jPAAuB,AAACC,wGAAOL,oBAAe,AAACK,wGAAOJ,sBAAiB,AAACI,wGAAOH;AAAzF,AACE,MAAO,AAACI,gDAAQF,IAAID;;AAExB,wBAAA,xBAAMI,wDAAQP,UAAUQ,KAAKP,OAAOC,EAAEC;AAAtC,AACE,GACE,iBAAAM,hBAAUD;AAAM,oBAAU,iBAAAE,mBAAI,AAACC,6CAAEH,KAAKN;AAAZ,AAAA,GAAAQ;AAAAA;;AACE,OAACF,mCAAKN;;;AADlB;AAAA,AAEE,AAACH,2BAAOC,UAAUC,OAAOC,EAAEC;;;AAH/C,AAIK,oBAAU,CAACK,qCAAAA,wCAAAA,LAAKN,oBAAAA;AAAhB;AAAA,AACE,AAACH,2BAAOC,UAAUC,OAAOC,EAAEC;;;;;AAClCD;;AAOF","names":["contrib.assert/error!","pred-expr","v-expr","v","ex-data","msg","cljs.core.pr_str","cljs.core.ex_info","contrib.assert/-check","pred","cljs.core/Keyword","or__4998__auto__","cljs.core._EQ_"],"sourcesContent":["(ns contrib.assert\r\n  #?(:cljs (:require-macros contrib.assert))\r\n  (:require [hyperfiddle.rcf :refer [tests]]))\r\n\r\n(defn- error! [pred-expr v-expr v ex-data]\r\n  (let [msg (str \"check failed: (\" (pr-str pred-expr) \" \" (pr-str v-expr) \") for \" (pr-str v))]\r\n    (throw (ex-info msg ex-data)))) ; todo elide top frames\r\n\r\n(defn -check [pred-expr pred v-expr v ex-data]\r\n  (cond\r\n    (keyword? pred) (when-not (or (= pred v) ; special rule - keyword equality\r\n                                (pred v))\r\n                      (error! pred-expr v-expr v ex-data))\r\n    () (when-not (pred v)\r\n         (error! pred-expr v-expr v ex-data)))\r\n  v)\r\n\r\n(defmacro check\r\n  ([v] `(check some? ~v))\r\n  ([pred v] `(check ~pred ~v {}))\r\n  ([pred v ex-data] `(-check '~pred ~pred '~v ~v ~ex-data)))\r\n\r\n(tests\r\n  (check nil) :throws #?(:clj clojure.lang.ExceptionInfo :cljs js/Error)\r\n  (check odd? 2) :throws #?(:clj clojure.lang.ExceptionInfo :cljs js/Error)\r\n  (check odd? 1) := 1\r\n  (check ::done ::done) := ::done\r\n  (check ::done ::not-done) :throws #?(:clj clojure.lang.ExceptionInfo :cljs js/Error)\r\n  (check ::done 42) :throws #?(:clj clojure.lang.ExceptionInfo :cljs js/Error)\r\n  (check ::done nil) :throws #?(:clj clojure.lang.ExceptionInfo :cljs js/Error))\r\n"],"x_google_ignoreList":[0]}