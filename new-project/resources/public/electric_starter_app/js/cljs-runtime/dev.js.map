{"version":3,"sources":["dev.cljc"],"mappings":";AASA,AA2BG,AACE,AAAKA,0BAAoB,AAAAC,8CAAA,AAAAC,4CAAA,AAAAC,uCAAA,wCAAA,4DAAA,kDAAA,yDAAA,8DAAA,2DAAA,2DAAA,0DAAA,yEAAA,iEAAA,IAAA,iBAAAC,kBAAA,AAAAC,+CAAA,AAAA,iCAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,WAAAC,eAAAC,cAAAC;AAAA,AAAA,AAAA,AAAA,OAAAC,6CAAAH,eAAA;;IAAAI,kBAAA,AAAAL,+CAAA,AAAA,iCAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,WAAAC,eAAAC,cAAAC;AAAA,AAAA,AAAA,AAAA,OAAAC,6CAAAH,eAAA;;IAAAK,kBAAA,AAAAN,+CAAA,AAAA,iCAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,WAAAC,eAAAC,cAAAC;AAAA,AAAA,AAAA,AAAA,OAAAC,6CAAAH,eAAA;;IAAAM,kBAAA,AAAAP,+CAAA,AAAA,iCAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,WAAAC,eAAAC,cAAAC;AAAA,AAAA,AAAA,AAAA,OAAAC,6CAAAH,eAAA;;IAAAO,kBAAA,AAAAR,+CAAA,AAAA,iCAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,WAAAC,eAAAC,cAAAC;AAAA,AAAA,IAAAM,kBAAA,AAAAC,yCAAAT,eAAAC;IAAAS,kBAAA,AAAAC,yCAAAX,eAAA,AAAAK,gBAAA,iBAAAO,WAAA,AAAAC,qDAAA;AAAA,AAAAD;KAAA;IAAAE,kBAAA,AAAAH,yCAAAX,eAAA,AAAAM,gBAAA,iBAAAS,WAAA,AAAAF,qDAAA;AAAA,AAAAE;KAAA;IAAAC,kBAAA,AAAAP,yCAAAT,eAAAC;AAAA,AAAA,OAAAE,6CAAAH,eAAA,mFAAAQ,gBAAAE,gBAAAI,gBAAAE;;IAAAC,kBAAA,AAAAlB,+CAAA,AAAA,iCAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,WAAAC,eAAAC,cAAAC;AAAA,AAAA,IAAAM,kBAAA,AAAAC,yCAAAT,eAAAC;AAAA,AAAA,OAAAE,6CAAAH,eAAA,mFAAAQ;;AAAA,AAAA,kBAAAR,eAAAC,cAAAC;AAAA,AAAA,IAAAM,kBAAA,AAAAC,yCAAAT,eAAAC;IAAAS,kBAAA,AAAAC,yCAAAX,eAAA,AAAAF,gBAAA,iBAAAoB,WAAA,AAAAL,qDAAA;AAAA,AAAAK;KAAA;IAAAJ,kBAAA,AAAAH,yCAAAX,eAAA,AAAAI,gBAAA,iBAAAe,WAAA,AAAAN,qDAAA;AAAA,AAAAM;KAAA;IAAAH,kBAAA,AAAAL,yCAAAX,eAAA,AAAAO,gBAAA,iBAAAa,WAAA,AAAAP,qDAAA;AAAA,AAAAO;KAAA;IAAAC,kBAAA,AAAAV,yCAAAX,eAAA,AAAAiB,gBAAA,iBAAAK,WAAA,AAAAT,qDAAA;AAAA,AAAAS;KAAA;IAAAC,kBAAA,AAAApB,6CAAAH,eAAA,mFAAAQ,gBAAAE,gBAAAI,gBAAAE,gBAAAK;AAAA,AAAA;;KAAA,IAAA,IAAA,IAAA,IAAA,AAAA,iCAAA;AAAA,AAAA,0FAAAG,kEAAAC;GAAA,OAAAC;;AAEzB,GAAA,QAAAC,gCAAAC;AAAA;AAAA,AAAA,cAAA,dAASC;;;AAET,kBAAA,lBAAgCC;AAAhC,AACE,QAAMD,cAAQ,wBAAA,WAAAE,nCAACrC;AAAD,AACG,mBAAA,mBAAAqC,/BAACE;GADJ,WAAAD;AAAA,AAEG,qBAAA,mBAAAA,jCAACE;;;;;AAEpB,iBAAA,jBAAwBC;AAAxB,AACE,oBAAMN;AAAN,AAAc,CAACA,4CAAAA,8CAAAA;;AAAf;;AACA,sBAAA,dAAMA","names":["dev/electric-entrypoint","hyperfiddle.electric-client/reload-when-stale","hyperfiddle.electric-client/boot-with-retry","hyperfiddle.electric.impl.runtime/main","G__36213-ctor-0","hyperfiddle.electric.impl.runtime/constructor","G__36213-frame","G__36213-vars","G__36213-env","hyperfiddle.electric.impl.runtime/make-input","G__36213-ctor-1","G__36213-ctor-2","G__36213-ctor-3","G__36213-ctor-4","G__36213-expr-0","hyperfiddle.electric.impl.runtime/source","G__36213-expr-1","hyperfiddle.electric.impl.runtime/target","G__36214","cljs.core.object_array","G__36213-expr-2","G__36215","G__36213-expr-3","G__36213-ctor-5","G__36216","G__36217","G__36218","G__36213-expr-4","G__36219","G__36213-expr-5","hyperfiddle.electric/?PrintClientException_hf_client_server","electric-starter-app.main/Main_hf_client_server","hyperfiddle.electric-client/connector","js/dev","js/dev.reactor","dev/reactor","dev/start!","p1__36211#","p1__36212#","js/console.log","js/console.error","dev/stop!"],"sourcesContent":["(ns dev\r\n  (:require\r\n   electric-starter-app.main\r\n   [hyperfiddle.electric :as e]\r\n   #?(:clj [electric-starter-app.server-jetty :as jetty])\r\n   #?(:clj [shadow.cljs.devtools.api :as shadow])\r\n   #?(:clj [shadow.cljs.devtools.server :as shadow-server])\r\n   #?(:clj [clojure.tools.logging :as log])))\r\n\r\n(comment (-main)) ; repl entrypoint\r\n\r\n#?(:clj ;; Server Entrypoint\r\n   (do\r\n     (def config\r\n       {:host \"0.0.0.0\"\r\n        :port 8080\r\n        :resources-path \"public/electric_starter_app\"\r\n        :manifest-path ; contains Electric compiled program's version so client and server stays in sync\r\n        \"public//electric_starter_app/js/manifest.edn\"})\r\n\r\n     (defn -main [& args]\r\n       (log/info \"Starting Electric compiler and server...\")\r\n\r\n       (shadow-server/start!)\r\n       (shadow/watch :dev)\r\n       (comment (shadow-server/stop!))\r\n\r\n       (def server (jetty/start-server!\r\n                     (fn [ring-request]\r\n                       (e/boot-server {} electric-starter-app.main/Main ring-request))\r\n                     config))\r\n\r\n       (comment (.stop server)))))\r\n\r\n\r\n#?(:cljs ;; Client Entrypoint\r\n   (do\r\n     (def electric-entrypoint (e/boot-client {} electric-starter-app.main/Main nil))\r\n\r\n     (defonce reactor nil)\r\n\r\n     (defn ^:dev/after-load ^:export start! []\r\n       (set! reactor (electric-entrypoint\r\n                       #(js/console.log \"Reactor success:\" %)\r\n                       #(js/console.error \"Reactor failure:\" %))))\r\n\r\n     (defn ^:dev/before-load stop! []\r\n       (when reactor (reactor)) ; stop the reactor\r\n       (set! reactor nil))))\r\n"]}